# Solving Algebraic/Transcendental Equations {#sec-apndx_solve_ates}

This appendix examines the numerical solution of sets of algebraic/transcendental equations (ATEs). There are numerous software packages that include an ATE solver (function that solves a set of ATEs numerically). While the details differ from one software package to another, the vast majority of ATE solvers require the same input, use it the same way, and return equivalent results. The information provided here should be sufficient to understand the examples presented in *Reaction Engineering Basics* and to solve sets of ATEs using software of oneâ€™s choosing. Readers seeking a more complete understanding should consult a numerical methods reference book or take a course on numerical methods.

## Identifying ATEs and Preparing to Solve Them Numerically

In *Reaction Engineering Basics*, almost any equation that does not contain an ordinary derivative or a partial derivative is likely an ATE. Slightly more specifically, a set of ATEs is a group of 1 or more mathematical equations that may involve or contain math operations (addition, subtraction, multiplication, and division), quantities raised to powers, and transcendental functions. Exponential functions are the most common transcendental functions appearing in the ATEs found in *Reaction Engineering Basics*. They arise any time an equation includes a rate coefficient that displays Arrhenius temperature dependence, @eq-arrhenius.

The quantities that may appear in a set of $N$ ATEs can be classified as (a) known constants, (b) the ATE unknowns, and (c) other unknowns. If there are $N$ ATEs in the set, then there must be $N$ ATE unknowns. The ATE unknowns are the quantities that are found by solving the ATEs. In reaction engineering analyses, it often happens that unknowns other than the ATE unknowns also appear in a set of ATEs. Before the set of ATEs can be solved numerically, the values of these other unknowns must be calculated or provided as will be described subsequently.

In preparation for numerically solving a set of ATEs, each equations must be rearranged into the form of a residual expression. Doing so is trivially simple. If there is a zero on either side of the equals sign, no rearrangement is necessary. If not, everything on one side of the equals sign should be subtracted from both sides of the equation. This will result in an equation with a zero on one side of the equals sign. The nonzero side of that equation is called a residual. A residual expression is created by choosing a variable to represent the residual and setting it equal to the nonzero side of the equation. In *Reaction Engineering Basics,* $\epsilon$ is usually used to represent residuals.

If a set of $N$ ATEs is being solved, they must be converted into a set of $N$ residual expressions. In general each residual can be a function of all of the ATE unknowns. Substitution of a set of ATE unknowns that solves the ATEs will cause all of the residuals to evaluate to zero. It should be noted that the ATEs may have multiple solutions.

## ATE Solvers

An ATE solver is a computer function that solves a set of ATEs numerically. Typically, an ATE solver must be provided with two inputs. The first is an initial guess for the ATE unknowns. The second is a residuals function. The residuals function receives a set of values for the ATE unknowns and uses them to evaluate and return the corresponding values of the ATE residuals. 

Effectively, the ATE solver uses the initial guess and residuals function to find a solution by trial and error. 

* It tests the initial guess by calling the residuals function and determining whether all of the ATE residuals equal zero.
* If the initial guess does not solve the ATEs, the ATE solver generates an improved guess and tests that.
    * The improved guess will not be an exact solution (unless the ATEs are linear equations), but usually it will be closer to the solution than the previous guess. 
* The ATE solver keeps generating improved guesses and testing them until no further improvement is possible.
* It then returns the final, most-improved guess as a solution of the ATEs.

### The Initial Guess for the Unknowns

When an ATE solver is first called, it must be provided with an initial guess for the ATE unknowns. Providing an acceptable guess is not usually difficult. In reaction engineering analyses, the ATE unknowns have a physical meaning. That, together with a qualitative understanding of how the equipment being modeled functions, provides guidance for making an initial guess.

As an example, the reactor design equations for a steady-state CSTR are a set of ATEs. Most often the ATE unknowns include a combination of the inlet or outlet molar flow rate of reagents, the inlet or outlet temperature of the reacting or heat exchange fluid, and the reactor volume or volumetric flow rate. One strategy is to guess that the molar flow rate a reactant will decrease slightly from inlet to outlet and that the molar flow rate of products won't change. The temperature can be guessed to increase if the reactions are exothermic or decrease if they are endothermic, with the change being 5 to 10 K. Qualitative understanding is not as helpful when guessing volume or volumetric flow rate. Because of the exponential temperature dependence in the Arrhenius expression, the residuals are often most sensitive to temperature guesses. 

### The Residuals Function {#sec-apndx_residuals_fcn}

The purpose of the residuals function is to evaluate the residuals, given a guess for the ATE unknowns. The engineer solving the ATEs must write the residuals function, but because it will be called by the ATE solver, the arguments to it, the values it returns and their formats are all specified by the ATE solver (or the mathematics software package that provides the solver). While the arguments to the response function always include an initial guess for the ATE unknowns and the return value always include the corresponding values of the ATE residuals, the mathematics software package specifies the details (e. g. are the guesses for the ATE unknowns passed as individual arguments or are they combined into a vector, etc.). The engineer calling the ATE solver must write the residuals function so it conforms to those specifications.

The calculations performed within the residuals function are straightforward. Values for the ATE unknowns are passed to it, and known constants are available. Therefore the only thing that the residuals function needs to do before it can evaluate the residuals is to calculate any other unknowns that appear in the ATEs. If it is not possible to calculate these other unknows within the residuals function, they must be provided to it.

Providing unknown constants to the residuals function forces a computer programming choice that won't be discussed here. Because the other unknowns cannot be passed to the residuals function as arguments, they need to be made available to the residuals function by other means. The documentation for the mathematics software package may suggest a preferred way to do this such as by using a global variable or by using a pass-through function. Once the other constants are calculated or made available, all that remains to be done within the residuals function is to evaluate the ATE residuals and return the results. 

### Convergence and Solver Issues {#sec-ate_solver_issues}

The numerical solution of a set of ATEs is an iterative process as described at the start of this section. Ideally, the ATE residuals should get closer and closer to zero with each iteration. This is called convergence to a solution. Typically, the solution returned by the solver will not be exact, but it will be "very close" to the exact solution. Put differently, when a converged solution is found, the difference between the solution returned by the solver and the exact solution is negligible.

Sometimes the solver is unable to converge to the point where the residuals are "very close" to zero. In this situation, the solver eventually has to quit without finding a converged solution. Typically it will print an error message or return a flag variable, and that variable will indicate whether or not a converged solution was obtained.

When the ATE solver is not able to converge to a solution, it is often because the guess provided to the solver wasn't close enough to a solution. The remedy then, is to make a different initial guess and try again to solve the ATEs. Examining the ATE residuals can sometimes help in making a new initial guess. For example, if all of the residuals are large negative numbers, that may suggest how to change the initial guess so that the ATE residuals become less negative (or even slightly positive) and closer to zero.

A singularity in one or more of the residuals could also prevent the ATE solver from converging. One type of singularity can arise if one or more residual functions have a denominator that contains an ATE unknown. As the solver iterates, it may generate an improved guess that causes such denominators to approach zero. Of course this then causes the residual to approach infinity. 

The manner in which ATE design equations are formulated in *Reaction Engineering Basics* may not make singularities of this kind apparent. Fortunately, in most situations, the solver can be made to converge by refining the initial guess. Alternatively, by substituting expressions for all unknowns that appear in the ATEs other than the ones to be found by solving the ATEs, any fractions with denominators containing ATE unknowns will become apparent. Multiplying both sides of that form of the ATE by each denominator will yield alternative residuals expressions where the singularities have been removed.

Finally, as already noted, sets of ATEs can have more than one solution. For example, a quadratic polynomial has two solutions. If a set of ATEs has multiple solutions, most ATE solvers will only find one of them. To find other solutions, the solver should be called again using a different initial guess.

## Mathematical Formulation of the Numerical Solution of a Set of ATEs {#sec-apndx_math_formulation_ates}

In *Reaction Engineering Basics* examples, the numerical solution of sets of ATEs is formulated as part of a model for a piece of equipment, most commonly a model for a steady-state CSTR. Prior to formulating the CSTR model, the design equations will have been generated, identified as ATEs, and written in the form of residuals expressions. Given and known constants, the ATE unknowns, and any additional unknowns will have been identified. The equations necessary for calculating the additional unknowns will have been generated, and a guess for a set of ATE unknowns that solves the equations will have been defined.

The formulation of the CSTR model incorporates the numerical solution of the ATEs. It entails writing specifications for two computer functions: a residuals function and a CSTR function. These specifications are written so as to concisely provide all of the information that is needed to write the computer code for those functions. The formulation always assumes that given and known constants are available whenever they are needed.

### Specifications for the Residuals Function

The specifications for the residuals function include a list of the arguments that it will receive, a list of any extra quantities that must be provided to it by some other means, a list of the values it returns, and its algorithm. The argument to the residuals function is always a guess for values of the ATE unknowns that solve the ATEs. When the code is written, this argument will be formatted as specified by the mathematics software being used.

The residuals function always returns the values of the ATE residuals evaluated using the guess provided as an argument. The mathematics software being used will dictate how the residuals must be formatted when the code is written. Within the residuals function, any additional unknowns must first be calculated, and then the residuals can be evaluated. The algorithm lists, in order of use, expressions for each quantity that needs to be calculated, ending with the calculation of the ATE residuals.

As the algorithm is being listed, it may be found that additional input is needed. That is, it may not be possible to calculate an intermediate quantity that is needed for the calculation of the ATE residuals. Additional input like this cannot be passed to the residuals function as arguments because the mathematics software being used dictates what the arguments must be. So if additional input is required by the residuals function, the specifications for the residuals function will list all input that must be made available to it by means other than being passed as an argument.

### Specifications for the CSTR Function

It is being assumed here that the ATEs being solved are the design equations for a steady-state CSTR, and so here the function will be called the CSTR function. It should be noted that there are occasions where the ATEs to be solved model some other equipment, in which case the function would be named differently.

The specifications for the CSTR function include the arguments passed to it, values it returns, and its algorithm, but not extra quantities to be provided by other means. The CSTR function is not called by the mathematics software package, and therefore any quantities it requires can be passed to it as arguments.

The arguments passed to the CSTR function will depend upon the nature of the particular assignment and the preferences of the person writing the code. If no arguments are needed, the specifications for the CSTR function should indicate that none are needed. If arguments are used, the specifications should list them.

As with the arguments, the CSTR function is not required to return any specific values. Generally, though, the CSTR function will return a set of ATE unknowns that solves ATEs, and the specifications for the CSTR function should list them. Within the CSTR function, the initial guesses for the ATE unknowns should first be declared or calculated. Then the ATE solver should be called.

When the code is written, the initial guess and the name of the residuals function will be formatted as specified by the mathematics software package providing the ATE solver. If the solver requires or allows additional arguments, they will be added as necessary.

The mathematics software will also dictate what values the solver returns and how they are formatted. Commonly the return values will provide some mechanism for determining whether the solver converged. When the code is written, it should check that a converged solution has been returned. If the solver did not converge, the code should report that a solution was not obtained.

The algorithm included in the specifications for the CSTR function need not indicate those programming details, however. It should list, in order of use, expressions that declare or calculate the initial values. Then it should indicate a call to the ATE solver. In *Reaction Engineering Basics* an "equation" of the following form is used in the CSTR function algorithm to indicate calling the ATE solver.

$$
\begin{matrix}
\text{comma-separated arguments} \\
\Downarrow \\
\text{ATE Solver} \\
\Downarrow \\
\text{return values}
\end{matrix}
$$

## Example

The example presented below highlights writing the design equations in the form of residual expressions and writing specifications for the residuals and CSTR functions. While it is based on the analysis of a CSTR, it should be possible to understand it without much, if any, knowledge of CSTRs. It simply provides the initial guess for the ATE unknowns without any discussion or illustration of the thought process involved in making that guess. Instead, the choice of an initial guess is discussed in every *Reaction Engineering Basics* example where a set of ATEs is solved because some understanding of CSTR behavior helps when making the guess.

```{r}
#| echo: false
#| output: false
library(tidyverse)
library(knitr)
library(kableExtra)
library(readxl)
source("Code/fmt_tibble_col.R")
```

### Solution of a Set of ATEs {#sec-example_I_4_1}

Suppose you are analyzing an ideal, steady-state CSTR, and you know the values of the following constant quantities: $\dot{V}$ = 75, $C_{A,0}$ = 1.0, $V$ = 50, $C_{B,0}$ = 1.2, $\rho$ = 1.0 x 10^3^, $\tilde{C}_p$ = 1.0, $T_0$ = 303, $\Delta H$  = -10,700, $k_0$ = 8.72 x 10^5^, $E$ = 7,200, and $R$ = 1.987. You have generated the design equations shown in equations (1) through (5) and identified them as ATEs. You intend to solve the design equations for the following ATE unknowns: $\dot{n}_{A,1}$, $\dot{n}_{B,1}$, $\dot{n}_{Y,1}$, $\dot{n}_{Z,1}$, and $T_1$. You have identified $r$ as an additional unknown and generated equations (6) through (9) for calculating its value.

$$
\dot{V}C_{A,0} = \dot{n}_{A,1} + rV \tag{1}
$$

$$
\dot{V}C_{B,0} = \dot{n}_{B,1} + rV \tag{2}
$$

$$
\dot{n}_{Y,1} = rV \tag{3}
$$

$$
\dot{n}_{Z,1} = rV \tag{4}
$$

$$
0 = \rho\dot{V}\tilde{C}_p\left(T_1 - T_0\right) + rV\Delta H \tag{5}
$$

$$
k = k_0 \exp{\left(\frac{-E}{RT_1}\right)} \tag{6}
$$

$$
C_A = \left(\frac{\dot{n}_{A,1}}{\dot{V}}\right) \tag{7}
$$

$$
C_B = \left(\frac{\dot{n}_{B,1}}{\dot{V}}\right) \tag{8}
$$

$$
r = kC_AC_B \tag{9}
$$

Having identified the design equations as ATEs, you know that to solve them you must provide an initial guess for the ATE unknowns and a residuals function. You have begun to formulate the CSTR model as shown below where you have already specified an initial guess for the ATE unknowns. Complete the CSTR model formulation by adding the ATEs, written in the form of residual expressions and specifications for the residuals function and the CSTR function. Then solve the ATEs numerically.

<center>**CSTR Model**</center>

**Design Equations**

$$
\text{rewrite equation (1) here in the form of a residual expression} \tag{10}
$$

$$
\text{rewrite equation (2) here in the form of a residual expression} \tag{11}
$$

$$
\text{rewrite equation (3) here in the form of a residual expression} \tag{12}
$$

$$
\text{rewrite equation (4) here in the form of a residual expression} \tag{13}
$$

$$
\text{rewrite equation (5) here in the form of a residual expression} \tag{11}
$$

**Initial Guess for the ATE Unknowns:**

$$
\dot{n}_{A,1,guess} = 0.9\dot{V}C_{A,0} \tag{15}
$$

$$
\dot{n}_{B,1,guess} = 0.9\dot{V}C_{B,0} \tag{16}
$$

$$
\dot{n}_{Y,1,guess} = 0.0 \tag{17}
$$

$$
\dot{n}_{Z,1,guess} = 0.0 \tag{18}
$$

$$
T_{1,guess} = T_0 + 5.0 \tag{19}
$$

**Residuals Function:**

[Arguments:]{.underline}

[Must be Available:]{.underline}

[Returns:]{.underline}

[Algorithm:]{.underline}

**CSTR Function:**

[Arguments:]{.underline}

[Returns:]{.underline}

[Algorithm:]{.underline}

---

:::{.callout-note collapse="false"}
## Note

The assignment narrative identifies equations (1) through (5) as the ATEs to be solved and $\dot{n}_{A,1}$, $\dot{n}_{B,1}$, $\dot{n}_{Y,1}$, $\dot{n}_{Z,1}$, and $T_1$ as the ATE unknowns. That makes the rate, $r$, an additional unknown. The defining equation for the rate then introduces $k$, $C_A$, and $C_B$, which are also additional unknowns.

This is typical of the way ATEs are formulated in *Reaction Engineering Basics.* As a consequence, the additional unknowns, $r$, $k$, $C_A$, and $C_B$, must be calculated within residuals function before the residuals can be evaluated. If any of them can't be calculated within the residuals function, they need to be made available to it by some other means because they can't be passed to it as arguments.

An alternative way to formulate the solution would be to use equations (1) through (9) as the ATEs and $\dot{n}_{A,1}$, $\dot{n}_{B,1}$, $\dot{n}_{Y,1}$, $\dot{n}_{Z,1}$, $T_1$, $r$, $k$, $C_A$, and $C_B$ as the ATE unknowns. With this formulation, there wouldn't be any additional unknowns, but it would be necessary to provide nine initial guesses instead of five.

:::

To begin, equations (1) through (5) need to be rearranged into the form of residual expressions. Doing so is trivial. If one side of the ATE is a zero, no rearrangement is necessary. Otherwise, simply subtract one side of the ATE from both sides of the equation. This will cause one side of the equation to become zero. The nonzero side is called a residual. To write the equations as residual expression, simply choose a variable to represent the residual and set it equal to the nonzero side of the equation. In *Reaction Engineering Basics,* $\epsilon$ is usually used to represent residuals, and the Design Equations section of the CSTR model formulation takes the following form.

**Design Equations**

$$
\epsilon_1 = \dot{V}C_{A,0} - \dot{n}_{A,1} - rV = 0 \tag{10}
$$

$$
\epsilon_2 = \dot{V}C_{B,0} - \dot{n}_{B,1} - rV = 0 \tag{11}
$$

$$
\epsilon_3 = - \dot{n}_{Y,1} + rV = 0 \tag{12}
$$

$$
\epsilon_4 = - \dot{n}_{Z,1} + rV = 0 \tag{13}
$$

$$
\epsilon_5 = \rho\dot{V}\tilde{C}_p\left(T_1 - T_0\right) + rV\Delta H = 0 \tag{14}
$$

The third component of the CSTR model consists of specifications for the residuals function. They are intended to concisely provide all of the information that is needed to write it. The purpose of the residuals function is to take a set of ATE unknowns and use them to evaluate the design equation residuals. In *Reaction Engineering Basics,* it is always assumed that all of the given and known constants are available to all functions, including the residuals function.

The residuals function specification should indicate the arguments passed to it, the quantities it returns, any additional quantities that must be made available to it, and the sequence of calculations it must perform to calculate the return values (i. e. the design equation residuals). The arguments are always a set of values for the ATE unknowns (here, $\dot{n}_{A,1}$, $\dot{n}_{B,1}$, $\dot{n}_{Y,1}$, $\dot{n}_{Z,1}$, and $T_1$), and the return values are always the corresponding set of design equation residuals (here, $\epsilon_1$, $\epsilon_2$, $\epsilon_3$, $\epsilon_4$, and $\epsilon_5$).

The sequence of calculations that needs to be performed by the residuals function, i. e. the algorithm, begins with calculation of the rate coefficient and concentrations of A and B. They can be calculated using equations (7) through (9). The rate then can be calculated using equation (6). Finally, the residuals can be evaluated, using equations (10) through (14). Thus, in this assignment, no other inputs need to be made available to the residuals function, resulting in the following specifications for the residuals function.

**Residuals Function:**

[Arguments:]{.underline} $\dot{n}_{A,1}$, $\dot{n}_{B,1}$, $\dot{n}_{Y,1}$, $\dot{n}_{Z,1}$, and ,$T_1$.

[Returns:]{.underline} $\epsilon_1$, $\epsilon_2$, $\epsilon_3$, $\epsilon_4$, and $\epsilon_5$

[Algorithm:]{.underline}

$$
k = k_0 \exp{\left(\frac{-E}{RT_1}\right)} \tag{7}
$$

$$
C_A = \left(\frac{\dot{n}_{A,1}}{\dot{V}}\right) \tag{8}
$$

$$
C_B = \left(\frac{\dot{n}_{B,1}}{\dot{V}}\right) \tag{9}
$$

$$
r = kC_AC_B \tag{6}
$$

$$
\epsilon_1 = \dot{V}C_{A,0} - \dot{n}_{A,1} - rV = 0 \tag{10}
$$

$$
\epsilon_2 = \dot{V}C_{B,0} - \dot{n}_{B,1} - rV = 0 \tag{11}
$$

$$
\epsilon_3 = - \dot{n}_{Y,1} + rV = 0 \tag{12}
$$

$$
\epsilon_4 = - \dot{n}_{Z,1} + rV = 0 \tag{13}
$$

$$
\epsilon_5 = \rho\dot{V}\tilde{C}_p\left(T_1 - T_0\right) + rV\Delta H = 0 \tag{14}
$$

That completes the first three components of the CSTR model. The final component is the CSTR function. The CSTR function will not be called by the ATE solver, so any input it requires can be provided as arguments. Consequently, there won't ever be a need to provide values to the CSTR function by means other than as arguments. The full specifications for the CSTR function, then, consist of listings of the arguments that will be passed to it, the values it will return, and the algorithm it will use to calculate the return values.

In this assignment, if the initial guess is calculated within the CSTR function, there isn't anything that needs to be passed to the CSTR function. Its purpose is to calculate the ATE unknowns, so those are the quantities it should return.

The CSTR function algorithm is straightforward. To start, the guess is calculated. If any quantities needed to be made available to the residuals function, that would be taken care of next, but in this example that isn't necessary. Finally the ATE solver can be called to get one set of ATE unknowns that solve the design equations. This leads to the following specifications for the CSTR function.

**CSTR Function:**

[Arguments:]{.underline} none.

[Returns:]{.underline} $\dot{n}_{A,1}$, $\dot{n}_{B,1}$, $\dot{n}_{Y,1}$, $\dot{n}_{Z,1}$, and ,$T_1$.

[Algorithm:]{.underline}

$$
\dot{n}_{A,1,guess} = 0.9\dot{V}C_{A,0} \tag{15}
$$

$$
\dot{n}_{B,1,guess} = 0.9\dot{V}C_{B,0} \tag{16}
$$

$$
\dot{n}_{Y,1,guess} = 0.0 \tag{17}
$$

$$
\dot{n}_{Z,1,guess} = 0.0 \tag{18}
$$

$$
T_{1,guess} = T_0 + 5.0 \tag{19}
$$

&nbsp;

$$
\begin{matrix}
\dot{n}_{A,1,guess}, \dot{n}_{B,1,guess}, \dot{n}_{Y,1,guess}, \dot{n}_{Z,1,guess}, T_{1,guess}, \text{Residuals Function} \\
\Downarrow \\
\text{ATE Solver} \\
\Downarrow \\
\dot{n}_{A,1}, \dot{n}_{B,1}, \dot{n}_{Y,1}, \dot{n}_{Z,1}, T_1
\end{matrix} \tag{20}
$$

#### Results, Analysis and Discussion

```{r}
#| echo: false
#| output: false
df <- read.csv("Calculations/example_I_4_1/results_python.csv")
```

A computer code was written to implement the CSTR model as formulated above, Specifically the residuals function and the CSTR function were created using a mathematics software package that included an ATE solver. The residuals function arguments and their formatting were implemented according to the specifications of that software package, as were the values it returns.

Additional code was written to call the CSTR function, display the results, and save the results to a file. The results were as follows: $\dot{n}_{A,1}$ = `r round(df$value[1],1)`, $\dot{n}_{B,1}$ = `r round(df$value[2],1)`, $\dot{n}_{Y,1}$ = `r round(df$value[3],1)`, $\dot{n}_{Z,1}$ = `r round(df$value[4],1)`, and $T_1$ = `r round(df$value[5],1)`.

Sets of ATEs can have multiple solutions, so the code was run again using several different initial guesses. It always converged to this solution, but that doesn't mean additional solutions don't exist. These results do make sense physically. Example [-@sec-example_12_7_4] illustrates a procedure that could be used to determine whether other solutions are possible, but that won't be done here.

## Symbols Used in @sec-apndx_solve_ates {#sec-apndx_symbols_soln_of_ates}

| Symbol | Meaning |
|:-------|:--------|
| $k$ | Rate coefficient. |
| $k_0$ | Arrhenius pre-exponential factor. |
| $\dot n_i$ | Molar flow rate of reagent $i$; an additional subscripted $0$ denotes the inlet molar flow rate or a subscripted $1$, the outlet molar flow rate. |
| $r$ | Rate of reaction. |
| $C_i$ | Molar concentration of reagent $i$, an additional subscripted 0 denotes the reactor inlet and 1 denotes the outlet. |
| $\tilde{C}_p$ | Gravimetric heat capacity. |
| $E$ | Activation energy. |
| $N$ | Number of ATEs being solved and number of ATE unknowns being found. | 
| $T$ | Temperature, a subscripted 0 denotes the reactor inlet and 1 denotes the outlet. |
| $V$ | Volume of reacting fluid. |
| $\dot{V}$ | Volumetric flow rate. |
| $\epsilon_i$ | Residual for the $i^{th}$ ATE. |
| $\rho$ | Density. |
| $\Delta H$ | Heat of reaction. |

: {tbl-colwidths="[20,80]"}
