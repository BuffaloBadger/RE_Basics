# Solving Algebraic/Transcendental Equations {#sec-apndx_solve_ates}

This appendix examines the numerical solution of sets of algebraic/transcendental equations (ATEs). There are numerous software packages that include an ATE solver (function that solves a set of ATEs numerically). While the details differ from one software package to another, the vast majority of ATE solvers require the same input and use it the same way. In order to follow *Reaction Engineering Basics* example assignments wherein sets of ATEs ae solved, and in order to implement them using an ATE solver of one's choosing, a general understanding of how ATE solvers work and the input that must be provided to them is needed. The intent of this appendix is to provide that necessary understanding.

## Identifying ATEs

In *Reaction Engineering Basics*, almost any equation that does not contain an ordinary derivative or a partial derivative is likely an ATE. Slightly more specifically, a set of ATEs is a group of 1 or more mathematical equations that may involve or contain math operations (addition, subtraction, multiplication, and division), quantities raised to powers, and transcendental functions. Exponential functions are the most common transcendental functions appearing in the ATEs found in *Reaction Engineering Basics*. They arise any time an equation includes a rate coefficient that displays Arrhenius temperature dependence, @eq-arrhenius.

## Defining Residuals for ATEs and a Residuals Function

When solving a set of ATEs numerically, it is useful to define a residual for each ATE. To do so, rearrange the ATE so that there is a zero on one side of the equation. (While doing this, some sources of singularity, described below in @sec-ate_solver_issues, also can be eliminated.) The residual is equal to the non-zero side of the resulting equation. In this way, a residual can be defined for each ATE in the set to be solved. Note that in general each residual is a function of all of the unknowns. A guess for a solution of a set of ATEs can be tested by using the guess to calculate the residuals. If all of the residuals equal zero, the guess is a solution of the set of ATEs.

A computer function, here called a residuals function, can be written and used to test guesses in that way. The residuals function receives as an argument, a guess for the solution. That is it receives a set of guess values for the unknowns. Within the residuals function, the guess is used to calculate the residual for each of the ATEs being solved. The residuals function then returns the resulting values of the residuals. Often the guesses are passed to the residuals function as a vector and the corresponding residuals are returned as a vector.

## Formulating the Solution of a Set of ATEs Mathematically {#sec-apndx_math_formulation_ates}

In general, a set of $N$ ATEs can contain any number of known, constant quantities. (More precisely, the values of these quantities must be known, and they must not be functionally dependent on the values of the unknowns.) The set of ATEs can be solved to find the values of $N$ unknown quantities (the unknowns). When completing reaction engineering assignments, the set of $N$ ATEs may contain more than $N$ unknown quantities initially. Nonetheless, mathematical formulation of the solution is straightforward.

{{< include Includes/_math_form_ates_soln.qmd >}}

## ATE Solvers

Typically, an ATE solver must be provided with two inputs. The first is an initial guess for the unknowns. The second is a residuals function, as defined above. The manner in which these inputs are provided to the solver depends upon the specific solver being used.

Effectively, an ATE solver finds the solution of a set of ATEs by trial and error. 

* It tests the initial guess by calling the residuals function and determining whether all of the residuals equal zero.
* If the initial guess is not a solution of the ATEs, the ATE solver generates an improved guess and tests that.
    * The improved guess will **not** be an exact solution (unless the ATEs are linear equations), but it will be closer to the solution than the previous guess. 
* The ATE solver keeps generating improved guesses and testing them until no further improvement is possible.
* It then returns the final, most-improved guess as the best solution of the ATEs.

So, the numerical solution of a set of ATEs is an iterative process, and ideally, the residuals should get closer and closer to zero with each iteration. This is called **convergence** to a solution. Typically, the solution returned by the solver will not be exact, but it will be "very close" to the exact solution. Put differently, when a converged solution is found, the difference between the solution returned by the solver and the exact solution is negligible.

### Solver Issues {#sec-ate_solver_issues}

Sometimes the solver is unable to converge to the point where the residuals are "very close" to zero. In this situation, the solver eventually has to quit without finding a converged solution. Typically it will print an error message or return a flag variable, and that variable will indicate whether or not a converged solution was obtained.

When the ATE solver is not able to converge to a solution, it is often because the guess provided to the solver wasn't close enough to the solution or because of a singularity in one or more of the residuals. For example, fractions that contain one or more unknowns in the denominator may appear in the residuals. If a guess for the solution causes such a denominator to equal zero, the residual becomes infinite.

Potential singularities can be removed by re-defining the residuals. To do so, first rearrange each ATE so there is a zero on one side of the equation. Then multiply through the equation by each denominator. Finally, use the resulting non-zero side of the equation as the residual. If possible, a better initial guess should be defined, and the solver should be called again.

Additionally, sets of nonlinear equations can have more than one solution. For example, a quadratic polynomial has two solutions. **If a set of ATEs has multiple solutions, most ATE solvers will only find one solution**. To find other solutions, the solver should be re-started using a different initial guess.

## Implementing the Solution of a Set of ATEs Numerically {#sec-apndx_numeric_formulation_ates}

The mathematical formulation of the solution of a set of ATES described in @sec-apndx_math_formulation_ates (a) identifies the $N$ ATEs to be solved, (b) identifies the $N$ unknowns to be found by solving the ATEs, and (c) generates ancillary equations that express all other non-constant quantities in terms of the unknowns. With that information, the solution can be implemented numerically as follows.

{{< include Includes/_num_impl_ates_soln.qmd >}}

## Example: Solving 3 ATEs to Find 3 Unknowns

{{< include ../RE_Basics_Examples/reb_I_6/problem_statement.qmd >}}

---

### Mathematical Formulation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The mathematical formulation of the solution of a set of ATEs is outlined in @sec-apndx_math_formulation_ates. Accordingly, here I must

{{< include Includes/_math_form_ates_soln.qmd >}}

:::

**Given and Known Constants:** $\dot n_{A,in}$ = 500 mol h^-1^, $V$ = 500 L, $\dot n_{Z,in}$ = 0 mol h^-1^, $\breve{C}_p$ = 1170 cal L^-1^ K^-1^, $\dot{V}$ = 250 L h^-1^, $T_{in}$ = 423 K, $\Delta H$ = 18,200 cal mol^-1^, $k_0$ = 1.14 x 10^9^ L mol^-1^ h^-1^, $E$ = 16,200 cal mol^-1^, and $R$ = 1.987 cal mol^-1^ K^-1^.

**Quantities of Interest:** $\dot{n}_A$, $\dot{n}_Z$, and $T$

**Model Equations:** Equations (1), (2), and (3), will be solved numerically to find the quantities of interest, $\dot{n}_A$, $\dot{n}_Z$, and $T$.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Having identified the equations, the unknowns and the known constants, now I must go through each equation, and express every other quantity in terms of the known constants and the unknowns.

In this example, the only other quantity that appears in any of the ATEs is $r$, so I will write an expression for $r$ in terms of the known constants and the unknowns. (As mentioned in the problem statement, it is assumed here that the engineer knows the rate expression used in equation (4) below.)

Writing the ancillary equation for $r$ introduces $C_A$, and $C_A$ is neither a known constant nor one of the unknowns, so an expression is needed for $C_A$, too.

:::

**Ancillary Equations**

$$
r = k_0 \exp{\left( \frac{-E}{RT} \right)} C_A^2 \tag{4}
$$

$$
C_A = \frac{\dot{n}_A}{\dot{V}} \tag{5}
$$

**Solution Procedure**

1. Substitute the known constants into all equations.
2. Substitute equation (5) for $C_A$ into equation (4).
3. Substitute equation (4) for $r$ into equations (1) through (3).
4. Solve equations (1) through (3) to find $\dot{n}_A$, $\dot{n}_Z$, and $T$.

### Numerical Implementation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The general procedure for numerical implementation of the solution is outlined in @sec-apndx_numeric_formulation_ates. I need to define residuals for each of the ATEs in and a guess for the solution in order to proceed. In this particular instance, there are no fractions in the ATEs. Consequently, none of the unknowns appears in a denominator, and there are no potential singularities that need to be removed.

In this system, I expect reagent A to be consumed and an equal amount of reagent Z to be produced. Hence, I might guess that $\dot{n}_A$ will equal one-half of $\dot{n}_{A,in}$ and that $\dot{n}_Z$ also will equal one-half of $\dot{n}_{A,in}$. I have no idea what the temperature might equal, but since the reaction is endothermic and the reactor is adiabatic I expect the temperature to be less than the inlet temperature. So I might guess that $T$ will be 1 K less than $T_{in}$.

:::

Residuals for equations (1) through (3), $\epsilon_1$, $\epsilon_2$, and $\epsilon_3$, can be defined as shown in equations (6), (7), and (8).

$$
\epsilon_1 = \dot n_{A,in} - \dot n_A - Vr \tag{6}
$$

$$
\epsilon_2 = \dot n_{Z,in} - \dot n_Z + Vr \tag{7}
$$

$$
\epsilon_3 = \dot{V} \breve{C}_p \left(  T - T_{in} \right) + Vr\Delta H \tag{8}
$$

The solution can then be implemented numerically as described in @sec-apndx_numeric_formulation_ates.

1. Make the given and known constants available for use in all equations.
2. Write a residuals function that
    a. receives a guess for the values of $\dot{n}_A$, $\dot{n}_Z$, and $T$ as an argument,
    b. calculates $C_A$ using equation (5),
    b. calculate $r$ using equation (4), and
    c. calculates and returns $\epsilon_1$, $\epsilon_2$, and $\epsilon_3$ using equations (6), (7), and (8).
3. Define an initial guess for $\dot{n}_A$, $\dot{n}_Z$, and $T$.
4. Call an ATE solver passing to it, the residuals function guess from step 2 and the initial guess from step 3, and receiving a solution from it.
5. Check that the solver returned a converged solution.

:::{.callout-note collapse="false"}
## Notes

1. Reactor models can be very sensitive to temperature due to the exponential term. For this reason it is prudent when guessing a temperature to guess a value that is close to a known temperature in the system, such as $T_{in}$ in this example. If the guess is too large, the exponential term may become excessively large and prevent the solver from converging.
2. In this situation (an endothermic reaction in an adiabatic CSTR) the engineer would not expect multiple solutions to be possible. If the engineer knew that multiple solutions were possible, steps 3 through 5 would be repeated using different initial guesses to find additional solutions.

:::

### Results

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
df <- read.csv("../RE_Basics_Examples/reb_I_6/matlab/results/reb_I_6_results.csv")
df <- fmt_tibble_col(df, 2, 3, 3, 1)
```

The calculations were performed as described above and it was found that $\dot{n}_A$ = `r df$value[1]` `r df$units[1]`, $\dot{n}_Z$ = `r df$value[2]` `r df$units[2]`, and $T$ = `r df$value[3]` `r df$units[3]`.

---

Note that the solution is not exact, but the error is negligibly small. That is, if the solution is used to calculate the residuals using equations (6) through (8), the values are not exactly zero, but instead, $\epsilon_1$ = `r df$value[4]`, $\epsilon_2$ = `r df$value[5]`, $\epsilon_3$ = `r df$value[6]`.

## Symbols Used in this Appendix {#sec-apndx_symbols_soln_of_ates}

| Symbol | Meaning |
|:-------|:--------|
| $k_0$ | Pre-exponential factor in the Arrhenius expression. |
| $\dot n_i$ | Molar flow rate of reagent $i$; an additional subscripted $in$ denotes the inlet molar flow rate. |
| $r$ | Rate of reaction. |
| $\breve{C}_p$ | Volumetric heat capacity of a fluid. |
| $C_i$ | Molar concentration of reagent $i$. |
| $E$ | Activation energy in the Arrhenius expression. |
| $N$ | Number of ATEs being solved and number of unknowns being found. |
| $R$ | Ideal gas constant. |
| $T$ | Temperature; an additional subscripted $in$ denotes the inlet temperature. | 
| $V$ | Volume of reacting fluid. |
| $\dot V$ | Volumetric flow rate. |
| $\epsilon_i$ | Residual for the $i^{th}$ ATE. |
| $\Delta H$ | Heat of reaction. |

: {tbl-colwidths="[20,80]"}
