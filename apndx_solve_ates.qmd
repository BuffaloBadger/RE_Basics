# Solving Algebraic/Transcendental Equations {#sec-apndx_solve_ates}

This appendix examines the numerical solution of sets of algebraic/transcendental equations (ATEs). In *Reaction Engineering Basics*, example assignments that entail numerical calculations are presented in three steps (see @sec-3_response_func): (1) the solution of the equations is formulated mathematically, (2) the general features of the numerical implementation of that solution are described, and (3) the solution is presented and discussed. The details of numerical implementation are not illustrated because there are numerous software packages that include an ATE solver (function that solves a set of ATEs numerically) and could be used. Assuming not all readers will want to use the same software, the examples in *Reaction Engineering Basics* describe numerical implementation generally.

While the details of using ATE solvers differ from one software package to another, the vast majority of ATE solvers require the same input and use it the same way. In order to follow *Reaction Engineering Basics* example assignments wherein sets of ATEs ae solved, and in order to implement them using an ATE solver of one's choosing, a general understanding of how ATE solvers work and the input that must be provided to them is needed. The intent of this appendix is to provide that necessary understanding.

## Identifying ATEs

In *Reaction Engineering Basics*, **almost any equation that does not contain an ordinary derivative or a partial derivative** is likely an ATE. Slightly more specifically, a set of ATEs is a group of 1 or more mathematical equations that may involve or contain math operations (addition, subtraction, multiplication, and division), quantities raised to a power, and transcendental functions. Exponential functions are the most common transcendental functions appearing in the ATEs found in *Reaction Engineering Basics*. They arise any time an equation includes a rate coefficient that displays Arrhenius temperature dependence, @eq-arrhenius.

## Writing ATEs as Residuals Functions

When solving a set of ATEs numerically, it is useful to re-write them as *residuals functions*. To do that, each equation is rearranged so there is a zero on one side of the equation. At the same time, some sources of singularity can be removed as described below in @sec-ate_solver_issues The non-zero side of the resulting equation is then used as the definition of a residual function. Doing this for each of a set of $N$ ATEs yields a set of $N$ residuals functions. A guess for the solution of the set of ATEs can be tested by using it to calculate the values of the corresponding residuals functions. If the residuals functions all equal zero, then the guess is a solution of the original ATEs.

## Formulating the Solution of a Set of ATEs Mathematically {#sec-apndx_math_formulation_ates}

In general, a set of $N$ ATEs can contain any number of known, constant quantities. (More precisely, the values of these quantities must be known, and they must not depend on the values of the unknowns.) In addition, the set of ATEs must contain at least $N$ unknown quantities (unknowns). Very often when completing reaction engineering assignments, a set of $N$ ATEs initially will contain more than $N$ unknowns. Mathematically formulating the solution of a set of $N$ ATEs is straightforward.

* Identify the $N$ ATEs to be solved.
* Identify the $N$ unknowns to be found by solving them. 
* Go through each of the $N$ ATEs, and express **every** quantity that appears in them in terms of known constants and the $N$ unknowns.
* Solve the resulting $N$ equations for the $N$ unknowns.

## ATE Solvers

Typically, an ATE solver must be provided with two inputs. The first is an initial guess for the unknowns. The second is a computer function or subroutine that accepts a guess for the solution as an argument and returns the corresponding values of the residuals functions. The manner in which these inputs are provided to the solver depends upon the specific solver being used.

Effectively, an ATE solver finds the solution of a set of ATEs by trial and error. 

* It tests the initial guess by calling the function that evaluates the residuals functions and determining whether they all equal zero.
* If the initial guess is not a solution of the ATEs, the ATE solver generates an improved guess and tests that.
    * In most cases, the improved guess will **not** be an exact solution, but it will be closer to the solution than the previous guess. 
* The ATE solver keeps generating improved guesses and testing them until no further improvement is possible.
* It then returns the final, most-improved guess as the best solution of the ATEs.

So, the numerical solution of a set of ATEs is an iterative process, and ideally, the values of the residuals should get closer and closer to zero with each iteration. This is called **convergence** to a solution. Typically, the solution returned by the solver will not be exact, but it will be "very close" to the exact solution.

### Solver Issues {#sec-ate_solver_issues}

Sometimes the solver is unable to converge to the point where the residuals are "very close" to zero. In this situation, the solver eventually has to quit without finding the solution. Typically it will print an error message or return a flag variable, and that variable will indicate whether or not a converged solution was obtained.

When the ATE solver is not able to converge to a solution, it is often because the guess provided to the solver wasn't close enough to the solution or because of a singularity in one or more of the residuals functions. For example, fractions that contain one or more unknowns in the denominator may appear in the ATEs and, if not eliminated, in the residuals functions. If a guess for the solution causes such a denominator to equal zero, the residual becomes infinite. It is advisable to remove as many of those denominators as possible by multiplying both sides of the equation by each denominator before trying to solve the equations numerically. When the solver does not converge, the residuals functions should be re-written to remove as many singularities as possible, and the solver should be called using a different initial guess.

Additionally, sets of nonlinear equations can have more than one solution. For example, a quadratic polynomial has two solutions. **If a set of ATEs has multiple solutions, most ATE solvers will only find one solution**. To find other solutions, the solver should be re-started using a different initial guess.

## Implementing the Solution of a Set of ATEs Numerically {#sec-apndx_numeric_formulation_ates}

The mathematical formulation of the solution of a set of ATES described in @sec-apndx_math_formulation_ates (a) identifies the $N$ ATEs to be solved, (b) identifies the $N$ unknowns to be found by solving the ATEs, and (c) generates ancillary equations that express all other non-constant quantities in terms of the unknowns. With that information, the solution can be implemented numerically as follows.

1. Make given and known constants available for use in all equations.
2. Define a guess for the solution.
3. Write a computer function that calculates and returns the values of the residuals functions given a guess for the solution.
4. Call an ATE solver passing to it, the guess from step 2 and the function from step 3.
5. Check that the solver returned a converged solution.
6. If additional solutions are possible, define an initial guess that is different from those used previously, and repeat steps 4 through 6.

## Example: Solving 3 ATEs to Find 3 Unknowns

{{< include ../RE_Basics_Examples/reb_I_1/problem_statement.qmd >}}

---

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
df <- read.csv("../RE_Basics_Examples/reb_I_1/matlab/results/reb_I_1_results.csv")
df <- fmt_tibble_col(df, 2, 3, 3, 1)
```

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The mathematical formulation of the solution of a set of ATEs is given in @sec-apndx_math_formulation_ates. Knowing that the ATEs will be solved numerically, first I will re-write them as residuals functions. Then, as described in @sec-apndx_math_formulation_ates, I must identify (a) the $N$ ATEs to be solved, (b) the $N$ unknowns to be found by solving them, and (c) the known constant quantities appearing in them.

:::

### Mathematical Formulation of the Solution

Equations (1) through (3) can be re-written as residuals functions, equations (4), (5), and (6).

$$
0 = \epsilon_1 = \dot n_{A,in} - \dot n_A - Vr \tag{4}
$$

$$
0 = \epsilon_2 = \dot n_{Z,in} - \dot n_Z + Vr \tag{5}
$$

$$
0 = \epsilon_3 = \dot{V} \breve{C}_p \left(  T - T_{in} \right) + Vr\Delta H \tag{6}
$$

**Given and Known Constants:** $\dot n_{A,in}$ = 500 mol h^-1^, $V$ = 500 L, $\dot n_{Z,in}$ = 0 mol h^-1^, $\breve{C}_p$ = 1170 cal L^-1^ K^-1^, $\dot{V}$ = 250 L h^-1^, $T_{in}$ = 423 K, $\Delta H$ = 18,200 cal mol^-1^, $k_0$ = 1.14 x 10^9^ L mol^-1^ h^-1^, $E$ = 16,200 cal mol^-1^, and $R$ = 1.987 cal mol^-1^ K^-1^.

**Quantities of Interest:** $\dot{n}_A$, $\dot{n}_Z$, and $T$

Equations (4), (5), and (6), will be solved numerically to find $\dot{n}_A$, $\dot{n}_Z$, and $T$.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

As noted in @sec-apndx_math_formulation_ates, before they can be solved I must go through each of the $N$ ATEs, and express **every** quantity that appears in them in terms of known constants and the $N$ unknowns.

In this example, the only quantity that appears in the ATEs that isn't one of the unknowns or a known constant is $r$, so I will write an expression for $r$ in terms of the unknowns and known constants. (As mentioned in the problem statement, it is assumed here that the engineer knows the rate expression used in equation (7) below.)

Writing the ancillary equation for $r$ introduces $C_A$, and $C_A$  is not one of the unknowns, nor is it a known constant, so an expression is needed for $C_A$, too.

:::

**Ancillary Equations for Solving the ATEs**

$$
r = k_0 \exp{\left( \frac{-E}{RT} \right)} C_A^2 \tag{7}
$$

$$
C_A = \frac{\dot{n}_A}{\dot{V}} \tag{8}
$$

At this point all quantities appearing in the ATEs have been expressed in terms of known constants and the unknowns, so equations (4), (5), and (6) can be solved numerically as outlined in @sec-apndx_numeric_formulation_ates.

### Numerical Implementation of the Solution

1. Make given and known constants available for use in all equations.
2. Define a guess for the solution (i. e. guess the values of $\dot{n}_A$, $\dot{n}_Z$, and $T$). 
3. Write a computer function that calculates and returns the values of the residuals functions given a guess for the solution. It should
    a. Calculate $C_A$ using equation (8).
    b. Calculate $r$ using equation (7).
    c. Calculate $\epsilon_1$, $\epsilon_2$, and $\epsilon_3$ using equations (4), (5), and (6).
4. Call an ATE solver passing to it, the guess from step 1 and the function from step 2.
5. Check that the solver returned a converged solution.
6. If additional solutions are possible, define an initial guess that is different from those used previously, and repeat steps 4 through 6.

### Results

For this particular system, the ATEs have only one solution. The calculations were performed as described above and it was found that $\dot{n}_A$ = `r df$value[1]` `r df$units[1]`, $\dot{n}_Z$ = `r df$value[2]` `r df$units[2]`, and $T$ = `r df$value[3]` `r df$units[3]`.

## Symbols Used in this Appendix {#sec-apndx_symbols_soln_of_ates}

| Symbol | Meaning |
|:-------|:--------|
| $k_0$ | Pre-exponential factor in the Arrhenius expression. |
| $\dot n_i$ | Molar flow rate of reagent $i$; an additional subscripted $in$ denotes the inlet molar flow rate. |
| $r$ | Rate of reaction. |
| $\breve{C}_p$ | Volumetric heat capacity $i$. |
| $C_i$ | Molar concentration of reagent $i$. |
| $E$ | Activation energy in the Arrhenius expression. |
| $N$ | Number of ATEs being solved and number of unknowns being found. |
| $R$ | Ideal gas constant. |
| $T$ | Temperature; an additional subscripted $in$ denotes the inlet temperature. | 
| $V$ | Volume of reacting fluid. |
| $\dot V$ | Volumetric flow rate. |
| $\epsilon_i$ | Residual function corresponding to the $i^{th}$ ATE. |
| $\Delta H$ | Heat of reaction. |

: {tbl-colwidths="[20,80]"}
