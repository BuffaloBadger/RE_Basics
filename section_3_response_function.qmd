# Reactor Response Functions {#sec-3_response_func}

@sec-3_design_eqns described how to select the design equations needed to model a chemical reactor. In *Reaction Engineering Basics*, the design equations are almost always solved within a reactor response function. As such, the reactor inputs, reactor parameters, fluid properties, and reaction properties from @tbl-reactor_variables will be known and the design equations will be solved numerically to find the reactor outputs. This brief chapter describes reactor response functions and notes factors that affect the order and nature of their arguments.

## Reactor Response

In *Reaction Engineering Basics*, the reactor design equations are solved numerically to find the values of the reactor output varibles. More specifically, the reactor design equations for non-continuous reactors, i. e. for BSTRs and SBSTRs, generally are solved to find the molar amount of every reagent, the reacting fluid temperature, and the exchange fluid temperature at the end of the process. The reactor design equations for continuous reactors, i. e. for CSTRs and PFRs, are solved to find the outlet molar flow rate of every reagent, the outlet temperature of the reacting fluid, the outlet temperature of the exchange fluid, and (if a momentum balance is used) the outlet pressure of the reacting fluid leaving a PFR.

In some analyses, those might be the quantities a reaction engineer is interested in. However, it is also quite possible that the reaction engineer is interested in the conversion of one of the reactants, the overall yield of one of the products, the overall selectivity for one of the products over another product, the final total pressure of the system, the outlet partial pressure or concentration of a reactant or product, etc. All of these quantities depend upon reactor output variables; some of them additionally depend upon reactor input variables. In fact, the reaction engineer might be interested in several of these quantities. Collectively, the set of quantities related to the reactor output that are of interest in a particular analysis can be referred to as the **reactor response**.

The key point is that once the reactor design equations have been solved for the reactor outputs, it is a simple and straightforward process to calculate any other response. Recalling that the reactor inputs and parameters are also known, calculating other responses typically involves simple application of their definition.

## Reactor Response Function

A **reactor response function** is just that. It is a computer function or subroutine. All *known and constant* reactor inputs, reactor parameters, fluid properties, and reaction properties (see @tbl-reactor_variables) are defined at the top of the function. Any reactor input, reactor parameter, or reaction property that is needed to solve the design equations, but is not known can be referred to as a missing input. Missing inputs are passed to the response function as arguments.

For some analyses, the responses of interest must be calculated multiple times, with each calculation using different values for one or more reactor inputs or reactor parameters. The reactor inputs and reactor parameters that are changed from one calculation of the response to the next can be referred to as adjusted input. The adjusted input variables also are passed to the response function as arguments. Depending on the nature of the analysis, the sets of adjusted input variables might be passed to the response function one at a time, or alternatively the sets of adjusted input variables might be passed to the response function all at once.

If the design equations are ATEs, a guess for the unknowns usually must be provided when solving them. Often it is possible to generate a guess within the response function. However, if necessary, a guess for the reactor outputs can also be passed to the response function as an argument. They can be referred to as guess arguments.

The combination of the known and constant inputs, missing inputs, and adjusted inputs are all that are needed to numerically solve the reactor design equations as described in @sec-3_design_eqns. Doing so yields the reactor outputs. After the reactor outputs have been found, any other responses of interest can be calculated as described above. The response function then returns the values of the responses of interest.

## Response Function Arguments

@fig-response_fcn presents a schematic representation of a response function. Depending upon the particular analysis being performed and the information that is known, the response function might have no arguments or one of several combinations of missing, adjusted, and guess arguments. Response functions with different combinations of arguments will be presented in later chapters of *Reaction Engineering Basics*. 

![Schematic representation of a response function.](./Graphics/reactor_response_function.png){#fig-response_fcn width=80%}

It is important to note that there are two basic ways that the response function is called. In the simpler case, the reaction engineer will **write code that directly calls the response function** and then processes the results it returns. In this case the reaction engineer can choose the order and nature of the arguments in the response function and then call it in a way that is consistent with those choices.

In other analyses, however, the reaction engineer writes code that calls numerical methods software and **passes the response function to that software as an argument**. In this case, the numerical methods software to which the response function is passed will dictate the order of the arguments in the response function and their nature (individual scalars, vectors, or matrices). In addition, when there are adjusted inputs, it will dictate whether the adjusted inputs are passed one set at a time or all at once. Clearly in the first case the response function will only return the responses for the one set of adjusted inputs passed to it. In the second case it will return the responses for all of the sets of adjusted inputs. These alternatives will be discussed as they are encountered in later chapters of this book.