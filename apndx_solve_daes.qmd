# Solving Selected Differential-Algebraic Equations {#sec-apndx_solve_daes}

Generally, a set of differential-algebraic equations (DAEs) includes two subsets of equations. One subset contains differential equations and the other contains ATEs. In many cases, a special computer function (a DAE solver) is needed to solve them numerically. This is *not* the case in *Reaction Engineering Basics*. **The DAEs encountered in *Reaction Engineering Basics* can be solved by using an IVODE solver within the residuals function passed to an ATE solver**. There are two scenarios where this occurs.

* A set of IVODEs has an unknown initial value or an unknown constant appearing within the equations.

* While IVODE initial values and final values both appear in the ATEs, the mathematical solution of the ATEs can be formulated so that only IVODE initial values are treated as unknowns in the ATEs.

## IVODEs with an Unknown Initial Value or Containing an Unknown Constant. {#sec-num_impl_unk_init_value}

As noted in @sec-apndx_solve_ivodes, IVODE solvers must be provided with initial values of *all* of the dependent variables and a derivatives function that uses the IVODEs to calculate the values of all of the derivatives. If the initial value of one of the dependent variables is unknown, it isn't possible to provide the necessary initial values. If an unknown constant appears in the IVODEs, it isn't possible to calculate the values of the derivatives.

Thus, if an initial value is unknown or if an unknown constant appears in the IVODEs, it isn't possible to call an IVODE solver to solve them. In both cases, an additional equation is needed in order to calculate the unknown initial value or constant. Whenever this situation arises in *Reaction Engineering Basics*, the final values of the independent variable *and* the final value of one of the dependent variables will be known. The final value of the independent variable will be used as the stopping criterion for solving the IVODEs, and the additional equation needed to find the missing initial value or constant will be an implicit equation involving the final value of the dependent variable.

To illustrate, consider @eq-ivode_w_unk_iv_1 where $f$ is a known function of $x$ and $y$. Let $c$ represent the unknown initial value or constant, $x_0$ the known initial value of the independent variable, $x_f$ its known final value, and $y_f$ the known final value of the dependent variable. As indicated in @eq-unk_ivode_init_value, the unknown initial value or constant then is "the value of $c$ such that the final value of $y$ calculated by solving the IVODEs, $y \big\vert_{x_f}$, equals the known final value, $y_f$." A residual corresponding to the implicit equation for $c$ can be written as shown in @eq-ukn_ivode_init_value_resid. There is only one unknown, $c$, in @eq-ukn_ivode_init_value_resid, so it can be solved for $c$ using an ATE solver.

$$
\frac{dy}{dx} = f
$$ {#eq-ivode_w_unk_iv_1}

$$
c : y \big\vert_{x_f} = y_f
$$ {#eq-unk_ivode_init_value}

$$
\epsilon = y \big\vert_{x_f} - y_f = 0
$$ {#eq-ukn_ivode_init_value_resid}

The use of ATE solvers was described in @sec-apndx_solve_ates. The key steps are (a) to write a residuals function that calculates the residuals given a guess for the unknowns, (b) define an initial guess for the unknowns, and (c) call an ATE solver to get the solution. Here, the ATE being solved is @eq-ukn_ivode_init_value_resid and the unknown is $c$. Hence, the residuals function will be passed a guess for $c$. It will have to call an IVODE solver and solve @eq-ivode_w_unk_iv_1 using that guess, to find $y \big\vert_{x_f}$. Once that is done, it can evaluate and return the residual, @eq-ukn_ivode_init_value_resid. 

The ATE solver will return the missing value of $c$. At that point, knowing the value of $c$, the IVODE solver can be used again to find the values of $x$ and $y$ over the range between their initial and final values. While the description here used a single IVODE, this procedure applies equally to sets of IVODEs.

* When solving the IVODEs in the steps that follow, use the final value of the independent variable as the stopping criterion.
* Use the known final value of a dependent variable to write a residual corresponding to the implicit equation for the unknown constant, $c$, as in @eq-ukn_ivode_init_value_resid.
* Write a residuals function that receives a guess for $c$, uses that value and an IVODE solver to solve the IVODEs for the corresponding calculated value,  $y \big\vert_{x_f}$, and calculates and returns the residual.
* Pass that residuals function and an initial guess for $c$ to an ATE solver to find the value of $c$.
* At this point, knowing the value of $c$, the IVODEs can be solved by calling an IVODE solver directly (see @sec-apndx_solve_ivodes).

The description presented here was brief and may seem abstract. Hopefully the example presented in @sec-example_K_1 will make it easier to understand how to find a missing IVODE initial value numerically.

## DAEs where the Unknowns in the ATEs are the Initial Values for the IVODEs {#sec-num_impl_daes}

A situation very similar to that as just described arises in certain reaction engineering analyses involving a set of DAEs. To illustrate, suppose the DAEs consist of two ATEs, Equations [-@eq-ate1_in_daes] and [-@eq-ate2_in_daes], and two IVODEs, Equations [-@eq-ivode1_in_daes] and [-@eq-ivode2_in_daes]. In those equations $y_{1,0}$ and $y_{2,0}$ represent the initial values of the dependent variables in the IVODEs and $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$ represent the final values of the dependent variables in the IVODEs.

$$
0 = f_1\left(y_{1,0}, y_{2,0}, y_1\big\vert_{x_f}, y_2\big\vert_{x_f} \right)
$$ {#eq-ate1_in_daes}

$$
0 = f_2\left(y_{1,0}, y_{2,0}, y_1\big\vert_{x_f}, y_2\big\vert_{x_f} \right)
$$ {#eq-ate2_in_daes}

$$
\frac{dy_1}{dx} = f_3\left(x, y_1, y_2\right)
$$ {#eq-ivode1_in_daes}

$$
\frac{dy_2}{dx} = f_4\left(x, y_1, y_2\right)
$$ {#eq-ivode2_in_daes}

The initial and final values of the independent variable in the IVODEs, $x_0$ and $x_f$, are known, but the other initial values,$y_{1,0}$ and $y_{2,0}$, are not known, so the IVODEs cannot be solved directly. There are two ATEs, but they contain four unknowns. However, as explained in @sec-apndx_solve_ates, the ATEs can be solved for $y_{1,0}$ and $y_{2,0}$ if $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$ are expressed in terms of $y_{1,0}$ and $y_{2,0}$. In fact, the IVODEs do exactly that: given values of $y_{1,0}$ and $y_{2,0}$, the IVODEs can be solved to find $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$.

Thus, the key to solving the DAEs is to formulate the solution of the ATEs using the initial values of the dependent variables in the IVODEs as the unknowns. The numerical implementation of the solution is then relatively straightforward.

* Choose the initial values of the dependent variables from the IVODEs as the unknowns to be found by solving the ATEs.
* Write a residuals function that receives a guess for those initial values and
    * uses that guess to solve the IVODEs numerically for the corresponding final values of the IVODEs,
    * evaluates the residuals corresponding to the ATEs (Equations [-@eq-ate1_in_daes] and [-@eq-ate2_in_daes] here), and
    * returns the values of the residuals
* Define an initial guess for initial values of the dependent variables from the IVODEs
* Call an ATE solver, passing the residuals function and the initial guess as arguments to find the initial values of the dependent variables from the IVODEs

At that point, the IVODEs can be solved directly by calling an IVODE solver as described in @sec-apndx_solve_ivodes. An example of solving a set of DAEs in the manner is presented in @sec-example_K_2.

## Examples

The first example below illustrates solving a set of IVODEs where the initial value of a dependent variable is unknown. The second example illustrates solving a set of DAEs when the solution of the ATEs can be formulated using initial values of the dependent variables in the IVODEs as the unknowns in the ATEs.

### Example of Solving IVODEs where an Initial Value is Unknown {#sec-example_K_1}

{{< include ../RE_Basics_Examples/reb_K_3_1/problem_statement.qmd >}}

#### Mathematical Formulation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The equations to be solved here are IVODEs. The mathematical formulation of the solution of IVODEs is described in @sec-apndx_solve_ivodes. Here there are three dependent variables ($\dot{n}_A$, $\dot{n}_Z$, and $T$) and there are three IVODEs, so no additional equations are needed. I can proceed to summarize the information provided in the problem statement.

:::

**Given and Known Constants**: $T_{out}$ = 400 K, $D$ = 1 in, $k_0$ = 7.49 x 10^9^ L mol^-1^ min^-1^, $E$ = 15,300 cal mol^-1^, $P$ = 4 atm, $\Delta H$ = -14,500 cal mol^-1^, $\hat{C}_{p,A}$ = 10.9 cal mol^-1^ K^-1^, $\hat{C}_{p,Z}$ = 21.8 cal mol^-1^ K^-1^, $L$ = 100 in, and $\dot{n}_{A,in}$ = 1.5 mol min^-1^.

**Quantity of Interest**: $T_{in} : T\big\vert_{z=L} = T_{out}$

**Model Equations**:

In addition to the IVODEs presented in equations (1) through (3), the implicit equation for the final temperature must be satisfied. The corresponding residual is defined in equation (5).

$$
\epsilon = T\big\vert_{z=L} - T_{out} \tag{5}
$$

**Ancillary Equations**:

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

In order to evaluate the residual, equation (5), the IVODEs will need to be solved. To do that every non-constant quantity appearing in the IVODEs must be expressed in terms of the independent and dependent variables. Here, the only non-constant quantity appearing in the IVODEs, other than the dependent variables, is $r$. The problem statement provides the necessary ancillary equation expressing $r$ in terms of the independent and dependent variables, equation (4).

:::

Equation (4) expresses $r$ in terms of known constants, the independent variable, $z$, and the dependent variables, $\dot{n}_A$, $\dot{n}_Z$, and $T$.

**Solution Procedure**

1. Substitute the given and known constants into all equations.
2. Substitute equation (4) for $r$ in equations (1) through (3).
3. Find a value of $T_{in}$ such that solving equations (1) through (3) using the initial values and stopping criterion in @tbl-apndx_K_3_1_init_values yields a final value of $T\big\vert_{z=L}$ that equals $T_{out}$.

#### Numerical Implementation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

@sec-num_impl_unk_init_value describes the numerical implementation of the solution procedure for finding an unknown initial value for an IVODE. I can use that implementation here. Within that implementation I will need to solve equation (5) numerically using an ATE solver as described in @sec-apndx_solve_ates. Within the residuals function for solving the ATE, I will need to solve the IVODEs, equations (1) through (3), as described in @sec-apndx_solve_ivodes.

:::

Create a model function that will perform the calculations and within that function

1. make the given and known constants available for use in all equations,
2. create a derivatives function that
    a. receives values of $\dot{n}_A$, $\dot{n}_Z$, and $T$,
    b. calculates $r$ using equation (4), and 
    c. calculates and returns the corresponding values of the derivatives using equations (1) - (3).
3. create a residuals function that
    a. receives a guess for $T_{in}$
    b. defines initial values and a stopping criterion using @tbl-apndx_K_3_1_init_values,
    c. calls an IVODE solver passing the derivatives function (step 2), initial values and stopping criterion (step 3b) to get the final value, $T\big\vert_{z=L}$, and
    d. evaluates and returns the residual, $\epsilon$, using equation (5).
4. define an initial guess for $T_{in}$.
5. call an ATE solver, passing the residuals function (step 3) and the initial guess (step 4) and checking that it converged, to get the desired value of $T_{in}$

#### Results and Discussion

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
d <- read.csv("../RE_Basics_Examples/reb_K_3_1/python/results/reb_K_3_1_results.csv")
d <- fmt_tibble_col(d, 2, 3, 3, 1)
```

The calculations were performed as described above. The required inlet temperature is `r d$value[1]` `r d$units[1]`.

This example showed how to calculate a missing initial value for a set of IVODEs, and then stopped at that point. In a typical reaction engineering analysis, the engineer would likely need to also calculate $\dot{n}_A$ and/or $\dot{n}_Z$ at $z=L$. Having found the missing initial value, that could be accomplished by calling an IVODE solver directly to solve the equations and obtain those values, as described in @sec-apndx_solve_ivodes.  

:::{.callout-note collapse="false"}
## Note

In this example the initial value of a dependent variable in the IVODEs was calculated. Essentially the same procedure and code could be used if the initial value was known, but a constant appearing in the IVODEs was missing. The biggest difference in that case would be that in step 3 of the numerical implementation above, the residuals function would receive a guess for that constant, and it would need to make that guess available for use in the derivatives function. This is essentially a programming issue, and the way it is accomplished will depend upon the software being used.

:::

### Example of Solving DAEs {#sec-example_K_2}

{{< include ../RE_Basics_Examples/reb_K_3_2/problem_statement.qmd >}}

#### Mathematical Formulation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

A good place to start is by listing the given and known constants, the quantities of interest, and the model equations. Here all of that information is explicitly provided in the problem statement.

:::

**Given and Known Constants**: $D$ = 5 cm, $\Delta H$ = -14,000 cal mol^-1^, $\dot{V}$ = 1150 cm^3^ min^-1^, $\breve{C}_p$ = 1.3 cal cm^-3^ K^-1^, $R_R$ = 1.3, $\dot{n}_{A,feed}$ = 1.0 mol min^-1^, $L$ = 50 cm, $T_{feed}$ = 300 K, $k_0$ = 4.2 x 10^15^ cm^3^ mol^-1^ min^-1^, and $E$ = 18,000 cal mol^-1^.

**Quantities of Interest**: $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, $T_{in}$, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The numerical solution of DAEs is detailed in @sec-num_impl_daes, which notes that the key to solving the equations is to mathematically formulated the solution of the ATEs with the initial values of the IVODEs as the unknowns. The solution of the IVODEs will then occur within the soluton of the IVODEs. Therefore, I will indicate the ATES as the model equations and the initial values of the dependent variables in the IVODEs, $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$, as the unknowns.

:::

**Model Equations**:

The ATEs, equations (4), (5), and (6) will be solved for $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$. Then the IVODEs, equations (1), (2), and (3) will be solved for $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$ using the initial conditions and stopping criterion in @tbl-apndx_K_3_2_initial_values.

**Ancillary Equations**:

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The ATEs include 3 quantities ($\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$) in addition to the unknowns to be found by solving the ATEs ($\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$). The former quantities must be expressed in terms of the unknowns. Given the unknowns, the IVODEs, equations (1) - (3) can be solved to find $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

In order to solve the IVODEs, every quantity appearing within them must be expressed in terms of the independent and dependent variables. The only variable quantity in equations (1) through (3), other than the independent ($z$) and dependent variables ($\dot{n}_A$,$\dot{n}_Z$, and $T$) is $r$, which is expressed in terms of the independent and dependent variables in equation (7).

:::

Given the unknowns in the ATEs, $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$, equations (1), (2), and (3) can be solved using the initial values and stopping criterion in @tbl-apndx_K_3_2_initial_values to get the values of $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$. In order to solve the IVODEs, equations (1), (2), and (3), $r$ must be expressed in terms of the independent and dependent variables. Equation (7) does that.

**Solution Procedure**:

1. Substitute the given and known quantities in all equations.
2. Substitute equation (7) for $r$ in equations (1), (2), and (3).
3. Solve equations (1) - (3) using the initial values and stopping criterion in @tbl-apndx_K_3_2_initial_values, and express $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$ in terms of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$.
4. Substitute the results from step 3 into the ATEs, equations (4) through (6), and solve for $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$.
5. Use the results from step 4 and the initial values and stopping criterion in @tbl-apndx_K_3_2_initial_values to solve equations (1) through (3) for $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

#### Numerical Implementation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

@sec-sec-num_impl_daes describes the numerical implementation of the solution of a set of DAEs. It requires the numerical solution of ATEs, as described in @sec-sec-apndx_solve_ates and the numerical solution of IVODEs, as described in @sec-apndx_solve_ivodes. In essence, when the solution of the ATEs is implemented, the IVODEs are solved within the residuals function. Then, after the ATEs have been solved for the initial values, the IVODEs are solved using the results.

I will need a guess for the unknowns in the ATEs. I'm simply going to guess that both inlet flows are equal to the known flow rate of A into the system. The reaction is exothermic, so I'm going to guess a temperature 5 K greater tnan the inlet value. If I knew more about the configuration of the system, I might be able to make more educated guesses, but I don't have that information. If the ATE solver doesn't converge, I'll just have to play around with these guesses until it does.

:::

Create a model function that will perform the calculations, and within that function

1. make the given and known constants available for use in all equations.
2. create a derivatives function that
    a. receives values of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$ as input,
    b. calculates $r$ using equation (7), and
    c. calculates and returns the values of the derivatives using equations (1) through (3).
3. create a residuals function that
    a. receives values of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$ as input,
    b. defines initial values and a stopping criterion using @tbl-apndx_K_3_2_initial_values,
    c. calls and IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 3b) to get the final values, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$, and
    d. evaluates and returns the residuals (the left sides of equations (4) through (6)).
4. define an initial guess for $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$.
5. call an ATE solver, passing the residuals function (step 3) and the initial guess (step 4) and checking that it converged, to get the desired values of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$.
6. use the results from step 5 to define initial values and a stopping criterion using @tbl-apndx_K_3_2_initial_values.
7. call an IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 6) to get the desired final values, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

#### Results and Discussion

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
df <- read.csv("../RE_Basics_Examples/reb_K_3_2/matlab/results/reb_K_3_2_results.csv")
df <- fmt_tibble_col(df, 2, 3, 3, 1)
```

The calculations were performed as described above and the results are shown in @tbl-apndx_K_3_2_results.

```{r}
#| echo: false
#| warning: false
#| label: tbl-apndx_K_3_2_results
#| tbl-cap: Results from solving the DAEs.
library(kableExtra)
library(knitr)
kbl(df, format = "markdown", align = "cc")
```

As noted in the introduction, the numerical solution of a set of DAEs generally requires using solver that is designed for that purpose. However, DAEs are only encountered a few times in *Reaction Engineering Basics*, and each time they are encountered, the mathematical formulation and numerical implementation of the solution can be accomplished in the same manner as illustrated in this example.

## Symbols Used in @sec-apndx_solve_daes

| Symbol | Meaning |
|:-------|:--------|
| $c$ | Unknown initial value or constant appearing in the IVODEs |
| $f$ | An unspecified function; an additional subscript is used to index the function if it is one of a set of functions. |
| $k_0$ | Arrhenius pre-exponential factor; an additional subscript indexes the reaction. |
| $\dot{n}$ | Molar flow rate; additional subscripts denote the reagent and identify the flow stream. |
| $r$ | Reaction rate; additional subscripts index the reaction. |
| $x$ | The independent variable in an IVODE; an additional subscripted $0$ denotes the initial value and an additional subscripted $f$ denotes the final value. |
| $y$ | The dependent variable in an IVODE; an additional subscript is used to index the dependent variables if there are more than one IVODEs; a second subscripted $0$ denotes the initial value and a second subscripted $f$ denotes the final value. |
| $z$ | Axial distance from the inlet of a PFR. |
| $E$ | Activation energy; an additional subscript indexes the reaction. |
| $\hat{C}_p$ | Molar heat capacity; an additional subscript indexes the reagent. |
| $\breve{C}_p$ | Volumetric heat capacity. |
| $D$ | PFR diameter. |
| $L$ | Length of a PFR. |
| $P$ | Pressure. |
| $R$ | Ideal gas constant. |
| $R_R$ | Recycle ratio. |
| $T$ | Temperature; an additional subscript denotes the flow stream. |
| $\dot{V}$ | Volumetric flow rate. |
| $\epsilon$ | Residual corresponding to an ATE. |
| $\Delta H$ | Heat of reaction; an additional subscript indexes the reaction. |

: {tbl-colwidths="[20,80]"}
