# Solving Differential-Algebraic Equations {#sec-apndx_solve_daes}

A set of differential-algebraic equations (DAEs) includes two subsets of equations. One subset contains differential equations and the other contains ATEs. Generally, a special computer function (a DAE solver) is needed to solve them numerically. This is *not* the case in *Reaction Engineering Basics*. **The DAEs encountered in *Reaction Engineering Basics* can be solved by using an IVODE solver within the residuals function passed to an ATE solver**. That is possible because in the DAEs in *Reaction Engineering Basics*, unknown quantities in the ATEs are initial or final values for the IVODEs, but they do not appear within the IVODEs.

## Mathematical Formulation of the Solution {#sec-form_soln_daes}

To illustrate, suppose the DAEs consist of two ATEs, Equations [-@eq-ate1_in_daes] and [-@eq-ate2_in_daes], and two IVODEs, Equations [-@eq-ivode1_in_daes] and [-@eq-ivode2_in_daes]. In those equations $y_{1,0}$ and $y_{2,0}$ represent the initial values of the dependent variables in the IVODEs and $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$ represent the final values of the dependent variables in the IVODEs.

$$
0 = f_1\left(y_{1,0}, y_{2,0}, y_1\big\vert_{x_f}, y_2\big\vert_{x_f} \right)
$$ {#eq-ate1_in_daes}

$$
0 = f_2\left(y_{1,0}, y_{2,0}, y_1\big\vert_{x_f}, y_2\big\vert_{x_f} \right)
$$ {#eq-ate2_in_daes}

$$
\frac{dy_1}{dx} = f_3\left(x, y_1, y_2\right)
$$ {#eq-ivode1_in_daes}

$$
\frac{dy_2}{dx} = f_4\left(x, y_1, y_2\right)
$$ {#eq-ivode2_in_daes}

The initial and final values of the independent variable in the IVODEs, $x_0$ and $x_f$, are known, but the other initial values,$y_{1,0}$ and $y_{2,0}$, are not known, so the IVODEs cannot be solved directly. There are two ATEs, but they contain four unknowns. However, as explained in @sec-apndx_solve_ates, the ATEs can be solved for $y_{1,0}$ and $y_{2,0}$ if $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$ are expressed in terms of $y_{1,0}$ and $y_{2,0}$. In fact, the IVODEs do exactly that: given values of $y_{1,0}$ and $y_{2,0}$, the IVODEs can be solved to find $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$.

Thus, the key to solving the DAEs is to formulate the solution of the ATEs using the *initial* values of the dependent variables in the IVODEs as the unknowns. Following the formulation presented in @sec-apndx_math_formulation_ates, the two ATEs, Equations [-@eq-ate1_in_daes] and [-@eq-ate2_in_daes], can be solved to find the two unknowns, $y_{1,0}$ and $y_{2,0}$ as follows.

1. Solve Equations [-@eq-ivode1_in_daes] and [-@eq-ivode2_in_daes] to express $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$ in terms of $y_{1,0}$ and $y_{2,0}$.
2. Substitute the results for $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$ in Equations [-@eq-ate1_in_daes] and [-@eq-ate2_in_daes].
3. Solve Equations [-@eq-ate1_in_daes] and [-@eq-ate2_in_daes] for $y_{1,0}$ and $y_{2,0}$.
4. Knowing the initial values, solve Equations [-@eq-ivode1_in_daes] and [-@eq-ivode2_in_daes] for $y_1\big\vert_{x_f}$ and $y_2\big\vert_{x_f}$.

## Numerical Implementation of the Solution {#sec-impl_soln_daes}

If the solution was being implemented analytically, the first step would not be possible in most situations. In contrast, the numerical implementation of the solution is relatively straightforward.

* When solving the IVODEs in the steps that follow, use the known final value of the independent variable as the stopping criterion.
* Choose the initial values of the dependent variables in the IVODEs as the unknowns to be found by solving the ATEs.
* Write a residuals function that receives a guess for those initial values and
    * uses that guess to solve the IVODEs numerically and get the corresponding final values of the IVODEs,
    * evaluates the residuals corresponding to the ATEs (Equations [-@eq-ate1_in_daes] and [-@eq-ate2_in_daes] here), and
    * returns the values of the residuals
* Define an initial guess for the initial values of the dependent variables in the IVODEs
* Call an ATE solver, passing the residuals function and the initial guess as arguments to find the initial values of the dependent variables from the IVODEs
* Knowing the initial values of the dependent variables, call an IVODE solver to calculate their final values.

## Example {#sec-example_K}

{{< include ../RE_Basics_Examples/reb_K_3/problem_statement.qmd >}}

```{r}
#| echo: false
#| output: false
path_to_data <- './Data/'
path_to_results <- '../RE_Basics_Examples/reb_K/python/results/'
path_to_figures <- './Graphics/'
```

---

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The first step in completing a reaction engineering assignment, @sec-3_reactor_model_func, is summarizing it. Here, symbols have been assigned to all constants and the quantities, so I can simply list the information.

:::

### Assignment Summary

**Given and Known Constants**: $D$ = 5 cm, $\Delta H$ = -14,000 cal mol^-1^, $\dot{V}$ = 1150 cm^3^ min^-1^, $\breve{C}_p$ = 1.3 cal cm^-3^ K^-1^, $R_R$ = 1.3, $\dot{n}_{A,feed}$ = 1.0 mol min^-1^, $L$ = 50 cm, $T_{feed}$ = 300 K, $k_0$ = 4.2 x 10^15^ cm^3^ mol^-1^ min^-1^, and $E$ = 18,000 cal mol^-1^.

**Reactor System**: Adiabatic, steady-state, recycle PFR.

**Quantities of Interest**: $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, $T_{in}$, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

### Mathematical Formulation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

@sec-form_soln_daes states that the key to solving a set of DAEs is to formulate the solution of the ATEs, and to consider the initial values for the IVODEs as the unknowns in the ATEs, so I will follow that advice here. There are 3 ATEs, equations (4), (5), and (6), and 3 unknown initial values, $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$, so no additional model equations are needed.

:::

**Model Equations**:

Equations (4) through (6) will be solved to find the values of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Before the ATEs can be solved, every quantity other than the unknowns must be expressed in terms of known constants and the unknowns. In this example, there are four such quantities: $r$, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

The narrative provides equation (7), which can be used to eliminate $r$. The other quantities can be eliminated by solving the IVODEs, equations (1) through (3). There are 3 IVODEs, and they contain 3 dependent variables, $\dot{n}_A$, $\dot{n}_Z$, and $T$, so it is not necessary to add IVODEs or eliminate dependent variables.

:::

**Ancillary Equations for Calculating the Residuals**:

The rate expression for $r$, is given, equation (7). The final values in equations (4) through (6) can be calculated by solving equations (1), (2), and (3) using the initial values and stopping criterion in @tbl-example_K_3_initial_values.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Before the IVODEs can be solved, any unknown constants appearing in them must be calculated and any variables other than the independent variables must be eliminated from them. Here there are no unknown constants in the IVODEs, and the only variable that needs to be eliminated is $r$.

:::

The rate expression, $r$, can also be used with calculating the derivatives in equations (1) through (3).

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

It is also necessary to calculate the initial and final values before the IVODEs can be solved. Here, the initial and final values of $z$ are known, and the other initial values will be provided by the ATE solver. Consequently no ancillary equations are needed to to calculate the initial and final values.

Solving the ATEs will yield three of the quantities of interest, namely $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$. Once that is done, the other quantities of interest can be calculated by solving the IVODEs. Thus, no additional ancillary equations are need to calculate the quantities of interest. 

:::

Given the information above, equations (4) through (6) can be solved to find $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$. After doing that, equations (1) through (3) can be solved to find $r$, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

**Solution Procedure**:

1. Substitute the given and known quantities in all equations.
2. Substitute equation (7) for $r$ in equations (1), through (6).
3. Express $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$ in terms of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$ by solving equations (1) - (3) using the initial values and stopping criterion in @tbl-example_K_3_initial_values.
4. Substitute the results from step 3 into the ATEs, equations (4) through (6), and solve for $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$.
5. Use the results from step 4 and the initial values and stopping criterion in @tbl-example_K_3_initial_values to solve equations (1) through (3) for $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

### Numerical Implementation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

@sec-impl_soln_daes describes the numerical implementation of the solution of a set of DAEs. It requires the numerical solution of ATEs, as described in @sec-apndx_solve_ates and the numerical solution of IVODEs, as described in @sec-apndx_solve_ivodes. The ATEs are already written in the form of residuals and the IVODEs are written in the form of derivatives expressions, so no additional equations are needed.

I will need a guess for the unknowns in the ATEs. I'm simply going to guess that both inlet flows are equal to the known flow rate of A into the system. The reaction is exothermic, so I'm going to guess a temperature 5 K greater tnan the inlet value. If I knew more about the configuration of the system, I might be able to make more educated guesses, but I don't have that information. If the ATE solver doesn't converge, I'll just have to play around with these guesses until it does.

:::

Create a model function that will perform the calculations, and within that function

1. make the given and known constants available for use in all equations,
2. write a derivatives function that
    a. receives values of $\dot{n}_{A}$, $\dot{n}_{Z}$, and $T$ as input,
    b. calculates $r$ using equation (7), and
    c. calculates and returns the values of the derivatives using equations (1) through (3),
3. write a residuals function that
    a. receives values of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$ as input,
    b. defines initial values and a stopping criterion using @tbl-example_K_3_initial_values,
    c. calls an IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 3b) to get the final values, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$, and
    d. evaluates and returns the residuals (the left sides of equations (4) through (6)),
4. define an initial guess for $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$,
5. call an ATE solver, passing the residuals function (step 3) and the initial guess (step 4) to get the desired values of $\dot{n}_{A,in}$, $\dot{n}_{Z,in}$, and $T_{in}$,
6. use the results from step 5 to define initial values and a stopping criterion using @tbl-example_K_3_initial_values, and
7. call an IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 6) to get the desired final values, $\dot{n}_A\big\vert_{z=L}$, $\dot{n}_Z\big\vert_{z=L}$, and $T\big\vert_{z=L}$.

### Results and Discussion

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
df <- read.csv("../RE_Basics_Examples/reb_K_3/python/results/reb_K_3_results.csv")
df <- fmt_tibble_col(df, 2, 3, 3, 1)
```

The calculations were performed as described above and the results are shown in @tbl-apndx_K_3_2_results.

```{r}
#| echo: false
#| warning: false
#| label: tbl-apndx_K_3_2_results
#| tbl-cap: Results from solving the DAEs.
library(kableExtra)
library(knitr)
kbl(df, format = "markdown", align = "cc")
```

As noted in the introduction, the numerical solution of a set of DAEs generally requires using solver that is designed for that purpose. However, DAEs are only encountered a few times in *Reaction Engineering Basics*, and each time they are encountered, the mathematical formulation and numerical implementation of the solution can be accomplished in the same manner as illustrated in this example.

## Symbols Used in @sec-apndx_solve_daes

| Symbol | Meaning |
|:-------|:--------|
| $f$ | An unspecified function; an additional subscript is used to index the function if it is one of a set of functions. |
| $k_0$ | Arrhenius pre-exponential factor; an additional subscript indexes the reaction. |
| $\dot{n}$ | Molar flow rate; additional subscripts denote the reagent and identify the flow stream. |
| $r$ | Reaction rate; additional subscripts index the reaction. |
| $x$ | The independent variable in an IVODE; an additional subscripted $0$ denotes the initial value and an additional subscripted $f$ denotes the final value. |
| $y$ | The dependent variable in an IVODE; an additional subscript is used to index the dependent variables if there are more than one IVODEs; a second subscripted $0$ denotes the initial value and a second subscripted $f$ denotes the final value. |
| $z$ | Axial distance from the inlet of a PFR. |
| $\breve{C}_p$ | Volumetric heat capacity. |
| $D$ | PFR diameter. |
| $E$ | Activation energy; an additional subscript indexes the reaction. |
| $L$ | Length of a PFR. |
| $P$ | Pressure. |
| $R$ | Ideal gas constant. |
| $R_R$ | Recycle ratio. |
| $T$ | Temperature; an additional subscript denotes the flow stream. |
| $\dot{V}$ | Volumetric flow rate. |
| $\Delta H$ | Heat of reaction; an additional subscript indexes the reaction. |

: {tbl-colwidths="[20,80]"}
