# Solving Initial-Value ODEs {#sec-apndx_solve_ivodes}

This appendix examines the numerical solution of sets of initial value ordinary differential equations (IVODEs). There are many software packages that include an IVODE solver (a function that can be used to solve sets of IVODEs). Under the assumption that different readers will choose to use different software packages, the discussion in this appendix is general. Nonetheless it provides sufficient information for readers to follow *Reaction Engineering Basics* examples wherein sets of IVODEs ae solved, and to implement them using the IVODE solver they prefer. Of course it will be necessary to consult the documentation for the chosen solver to learn the details for using it. Readers seeking a more complete understanding of how IVODE solvers work should consult a numerical methods textbook or take a course on numerical methods.

## Identifying IVODEs

A differential equation contains at least one derivative. A distinguishing feature of a set of **ordinary** differential equations is that every derivative that appears in the equations has the same independent variable. Put differently, there are no partial derivatives in a set of ordinary differential equations. In virtually all cases, the sets of IVODEs that are solved in *Reaction Engineering Basics* are linear, first-order ODEs. That means that there are no higher order derivatives in the set and that there are no products, quotients or powers of the first-order derivatives.

Thus, the sets of IVODEs under consideration here will take the form shown in Equations [-@eq-example-ode-1] through [-@eq-example-ode-4]. In those equations $x$ is the independent variable; $y_1$, $y_2$, $y_3$, and $y_4$ are the dependent variables; and $m_{1,1}$ through $m_{4,4}$ and $g_1$ through $g_4$ can be constants or functions of the independent and dependent variables.

$$
m_{1,1}\frac{dy_1}{dx} + m_{1,2}\frac{dy_2}{dx} + m_{1,3}\frac{dy_3}{dx} + m_{1,4}\frac{dy_4}{dx} = g_1 
$$ {#eq-example-ode-1}

$$
m_{2,1}\frac{dy_1}{dx} + m_{2,2}\frac{dy_2}{dx} + m_{2,3}\frac{dy_3}{dx} + m_{2,4}\frac{dy_4}{dx} = g_2 
$$ {#eq-example-ode-2}

$$
m_{3,1}\frac{dy_1}{dx} + m_{3,2}\frac{dy_2}{dx} + m_{3,3}\frac{dy_3}{dx} + m_{3,4}\frac{dy_4}{dx} = g_3 
$$ {#eq-example-ode-3}

$$
m_{4,1}\frac{dy_1}{dx} + m_{4,2}\frac{dy_2}{dx} + m_{4,3}\frac{dy_3}{dx}  + m_{4,4}\frac{dy_4}{dx} = g_4 
$$ {#eq-example-ode-4}

While four equations are being used here for illustration purposes, there can be any number of ordinary differential equations in the set as long as the number of ordinary differential equations is equal to the number of dependent variables, and there is only one independent variable. In *Reaction Engineering Basics*, the independent variable is either the elapsed time, $t$, or the axial position, $z$, measured from the inlet of a plug flow reactor.

In order solve a set of linear, first-order ODEs, the value of each dependent variable must be known at some value of the independent variable. If the value of *every* dependent variable is known at *the same* value of the independent variable, they are called *initial values* and the equations are known as **initial value** ordinary differential equations.

## Analytical *vs*. Numerical Solutions of IVODEs 

There are important differences between analytical and numerical solutions of IVODEs that must be appreciated when implementing numerical solutions. To illustrate these differences, consider the IVODE shown in @eq-ivode where $x$ is the independent variable, $y$ is the dependent variable and $a$ is a constant. If the initial values of $x$ and $y$ are $x_0$ and $y_0$, as indicated in @eq-initial-value, the solution is @eq-ivode-soln.

$$
\frac{dy}{dx} = ax
$$ {#eq-ivode}

$$
y \Bigr\rvert_{x=x_0} = y_0
$$ {#eq-initial-value}

$$
y = \frac{a}{2}\left(x^2 - x_0^2\right) + y_0
$$ {#eq-ivode-soln}

Three aspects of the analytical solution are important. First, the solution is an analytical function, @eq-ivode-soln. Second, the initial values do not need to be specified; they can be represented by unspecified constants ($x_0$ and $y_0$). Third, constant quantities that appear in the IVODEs (such as $a$, here) do not need to be known.

In contrast, in order to solve @eq-ivode numerically, the numeric values of $x_0$, $y_0$, and $a$ must be known. In addition, either the *final* value of the independent variable, $x_f$, or the *final* value of the dependent variable, $y_f$, must be known. The other difference is that the solution is not an analytical function; it is a table with one column containing values of the independent variable, starting at its initial value, and with additional columns containing corresponding values of each dependent variable, starting at their initial values. Thus, when $x_0=3$, $y_0=10$, $a=2$, and $x_f=4.5$ (or $y_f=21.25$) the numerical solution of @eq-ivode is the table of values of $x$ and $y$ shown in @tbl-ivode-num-soln. (Different IVODE solvers may generate tables with different numbers of rows, but the first row will always contain the initial values and the last row will always contain the known final value.)

|  x  |   y   |
|:---:|:-----:|
| 3.0 | 10.00 |
| 3.1 | 10.61 |
| 3.3 | 11.89 |
| 3.4 | 12.56 |
| 3.6 | 13.96 |
| 3.7 | 14.69 |
| 4.0 | 17.00 |
| 4.5 | 21.25 |

: Numerical solution of @eq-ivode for the initial values given in @eq-initial-value. {#tbl-ivode-num-soln}

## Formulating the Solution of a Set of IVODEs Mathematically {#sec-math_form_ivodes}

When a reaction engineer first generates a set of IVODEs, the equations may contain known constants, the independent variable, the dependent variables, and additional variables that are functionally dependent upon the independent and/or dependent variables. Before the IVODEs can be solved, either analytically or numerically, the additional variables must be expressed in terms of the independent and dependent variables. Further, in anticipation of numerical solution, the values of all constants within the equations and the initial and final values must be calculated if they are not known. Mathematical formulation of the solution proceeds as follows.

{{< include Includes/_math_form_ivodes_soln.qmd >}}

## IVODE Solvers

The inner workings of IVODE solvers are beyond the scope of *Reaction Engineering Basics*. Nonetheless, a simplified understanding of how IVODEs are solved numerically is useful. The solver starts from the initial values, as illustrated graphically in part (a) of @fig-ivode-integration-step for any one of the dependent variables. It isn't possible to plot $y$ *vs.* $x$ at that point because $y\left(x\right)$ is not known. (Indeed, $y\left(x\right)$ is the solution to the IVODE.) Instead, the solver uses the IVODEs to calculate the value of each of the derivatives at $\left(x_0,y_0\right)$. The derivative, $\frac{dy}{dx}$, at that point is the slope of the unknown function at $\left(x_0,y_0\right)$. This is shown graphically in part (b) of @fig-ivode-integration-step.

![Graphical Representation of an IVODE Integration Step. (a) The initial value. (b) The slope at that point. (c) Incrementally increasing x and approximating the corresponding y.](./Graphics/IVODE_Integration_Step.png){#fig-ivode-integration-step}

Starting from the known point, $\left(x_0,y_0\right)$, the solver increases $x$ by a small amount, $\Delta x$, which is known as the *step-size*. It then calculates the corresponding change in $y$, $\Delta y$, using the slope. The resulting point, $\left(x_1,y_1\right)$, is shown in part (c) of @fig-ivode-integration-step. This process is sometimes referred to as taking an integration step. Effectively, the solver uses the small straight line segment between $\left(x_0,y_0\right)$ and $\left(x_1,y_1\right)$ to approximate the true solution, $y\left(x\right)$, in that interval. The accuracy of this approximation increases as $\Delta x$ decreases, so typically the solver uses a large number of very small steps.

Of course, the solver eventually must stop taking integration steps. After completing each step, the solver checks to determine whether making that step resulted in the stopping criterion being satisfied. If not, the solver takes another integration step. As an example, suppose the stopping criterion is that $y_3$ should equal some value, $y_{3,f}$, the solver would check to see whether $y_3$ did, in fact, reach or surpass $y_{3,f}$ after making the step. In most cases the stopping criterion will have been surpassed by some small amount, in which case the solver interpolates to find final values that exactly satisfy the stopping criterion. It then returns the values of the dependent variables and the independent variable for all of the steps it took while solving the IVODEs, including those final interpolated values.

### Cautions Related to Numerical Solution of IVODEs

*When the stopping criterion is a value of one of the dependent variables*, many solvers require that you provide *both* a final value of the independent variable *and* the known final value of that dependent variable. The solver then takes steps as described above, and after each step it checks to see whether either variable has reached its specified final value. The problem is that if you specify a final value of the *independent* variable that is too small, the solver may reach that value first and stop. The stopping criterion you specified for the dependent variable will not have been reached, and the result that is returned is not the result you are seeking. Therefore it is important to **check that the dependent variable reached the specified final value**.

To avoid having the solver stop because it reached the stopping criterion for the *independent* variable, it is tempting to specify a very large final value for the independent variable stopping criterion. The problem with doing this is that it may cause the solver to use a step size that is too large, resulting in an inaccurate solution. Therefore, it is important to **check that the step size was not too large**. The solution that is returned will include the final value of the independent variable. The stopping criterion for the independent variable can be set to a value slightly larger than that and the equations can be solved a second time. Assuming the second solution reaches the desired stopping criterion for the dependent variable, the second solution should be accurate.

A second possible problem arises when solving sets of IVODEs where one of the dependent variables changes very abruptly over a very small range of the independent variable. The abrupt changes in that dependent variable may significantly affect the other dependent variables over a much broader range of the independent variable. Equations like this are called **stiff ODEs**, and they require special treatment of the step size. Therefore, when solving sets of ODEs, one should pay attention to whether any of the dependent variables change very abruptly as the independent variable changes. If they do, it is advisable to repeat the solution using a solver that is specifically tailored to stiff ODEs.

## Derivative Expressions and the Derivatives Function  {#sec-mass_matrix}

As noted above, each time the IVODE solver takes an integration step, it needs to use the set of IVODEs to calculate the value of each derivative. To do so, it is useful to convert the IVODEs into a set of expressions for the individual derivatives. For example, Equations [-@eq-example-ode-1] through [-@eq-example-ode-4] need to be converted to derivative expressions of the form shown in Equations [-@eq-example-vector-ode-1] through [-@eq-example-vector-ode-4] where $f_1$, $f_2$, $f_3$, and $f_4$ each may be a function of $x$, $y_1$, $y_2$, $y_3$, and $y_4$.

$$
\frac{dy_1}{dx}  = f_1 
$$ {#eq-example-vector-ode-1}

$$
\frac{dy_2}{dx} = f_2 
$$ {#eq-example-vector-ode-2}

$$
\frac{dy_3}{dx} = f_3 
$$ {#eq-example-vector-ode-3}

$$
\frac{dy_4}{dx} = f_4 
$$ {#eq-example-vector-ode-4}

Doing so can be accomplished by algebraic manipulation of Equations [-@eq-example-ode-1] through [-@eq-example-ode-4], but it is particularly straightforward if the original IVODEs are written as a matrix equation. The coefficients in Equations [-@eq-example-ode-1] through [-@eq-example-ode-4], $m_{1,1}$, $m_{1,2}$, etc., can be used to construct a matrix, $\boldsymbol{M}$, as shown in @eq-mass-matrix, the dependent variables can be used to construct a column vector, $\underline{y}$, as in equation @eq-dependent-var-vector, and the functions, $g_1$, $g_2$, $g_3$, and $g_4$, can be used to construct a column vector, $\underline{g}$, as in equation @eq-function-vector. The matrix, $\boldsymbol{M}$, is known as the *mass matrix*.

$$
\boldsymbol{M} = \begin{bmatrix} m_{1,1} \ m_{1,2} \ m_{1,3} \ m_{1,4} \\m_{2,1} \ m_{2,2} \ m_{2,3} \ m_{2,4} \\m_{3,1} \ m_{3,2} \ m_{3,3} \ m_{3,4} \\ m_{4,1} \ m_{4,2} \ m_{4,3} \ m_{4,4}  \end{bmatrix}
$$ {#eq-mass-matrix}

$$
\underline{y} = \begin{bmatrix} y_1 \\ y_2 \\ y_3 \\ y_4 \end{bmatrix}
$$ {#eq-dependent-var-vector}

$$
\underline{g} = \begin{bmatrix} g_1 \\ g_2 \\ g_3 \\ g_4 \end{bmatrix}
$$ {#eq-function-vector}

Equations [-@eq-example-ode-1] through [-@eq-example-ode-4] then can be written as a matrix equation, @eq-matrix-form-ivode. Pre-multiplying each side of @eq-matrix-form-ivode by the inverse of the mass matrix yields the desired derivative expressions, @eq-matrix-form-of-vector-ivodes. That is, comparing @eq-matrix-form-of-vector-ivodes to Equations [-@eq-example-vector-ode-1] through [-@eq-example-vector-ode-4], it is apparent that they are equivalent with  $f_1$, $f_2$, $f_3$, and $f_4$ given by @eq-g-in-terms-of-f.

$$
\boldsymbol{M}\frac{d}{dx}\underline{y} = \underline{g}
$$ {#eq-matrix-form-ivode}

$$
\frac{d}{dx}\underline{y} = \boldsymbol{M}^{-1} \underline{g}
$$ {#eq-matrix-form-of-vector-ivodes}

$$
\begin{bmatrix} f_1 \\ f_2 \\ f_3 \\ f_4 \end{bmatrix} = \underline{f} = \boldsymbol{M}^{-1} \underline{g}
$$ {#eq-g-in-terms-of-f}

Matrix representation provides a compact way of writing large sets of IVODEs. More importantly, @eq-matrix-form-of-vector-ivodes facilitates writing a derivatives function that takes the values of the independent and dependent variables as input and returns the values of the derivatives.

## Implementing the Solution of a Set of IVODEs Numerically {#sec-num_impl_ivodes}

The numerical implementation of the solution parallels the mathematical formulation as described in @sec-math_form_ivodes. A reactor model function can be written to perform the calculations as follows.

{{< include ./Includes/_num_impl_ivodes_soln.qmd >}}

Most often, steps 3b and 4 above simply involve using the ancillary equations to calculate a value as in [Example -@sec-example_J_7_1]. However, there are two situations where those steps will require solving an ancillary equation using an ATE solver. The first situation is when an unknown constant appears in the IVODEs and the second is when the initial value of one of the dependent variables is unknown. In both of these situations, *two* final values will be known: the final value of the independent variable *and* the final value of one of the dependent variables. In these situations, the final value of the independent variable is used as the stopping criterion and the known final value of a dependent variable is used to write an implicit ancillary equation for calculating the unknown constant or initial value. They are illustrated in [Example -@sec-example_J_7_2] and [Example -@sec-example_J_7_3].

## Examples

[Example -@sec-example_J_7_1] shows how to solve a set of IVODEs numerically when there are no unknown constants within the equations, all of the initial values are known, and one final value is known. Additionally, it illustrates using the mass matrix to write the derivatives function as described in @sec-mass_matrix. [Example -@sec-example_J_7_2] illustrates the solution of a set of IVODEs when an unknown constant appears in the equations. [Example -@sec-example_J_7_3] uses the same set of IVODEs to illustrate solution when an initial value is unknown.

### Example: Numerical Solution of a Set of IVODEs {#sec-example_J_7_1}

{{< include ../RE_Basics_Examples/reb_J_7_1/problem_statement.qmd >}}

```{r}
#| echo: false
#| output: false
path_to_results <- '../RE_Basics_Examples/reb_J_7_1/python/results/'
```

---

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

In completing this example, I will follow the steps in @sec-reactor_analysis_steps, beginning with a concise summary.  In this example variable symbols have already been assigned to each known constant and the quantities of interest have been identified, so all I need to do is list them.

:::

**Given and Known Constants**: $V$ = 2 m^3^, $\Delta H_1$ = -6870 cal mol^-1^, $\hat{C}_{p,A}$ = 7.5 cal mol^-1^ K^-1^, $\hat{C}_{p,B}$ = 8.5 cal mol^-1^ K^-1^, $\hat{C}_{p,Y}$ =  12.1 cal mol^-1^ K^-1^, $\hat{C}_{p,Z}$ =  5.7 cal mol^-1^ K^-1^, $k_{0,1}$ = 83.0 m^3^ mol^-1^ h^-1^, and $E_1$ = 10.2 kcal mol^-1^.

**Reactor**: Adiabatic BSTR
 
**Quantities of Interest**: $n_A\left(t\right)$, $n_B\left(t\right)$, $n_Y\left(t\right)$, $n_Z\left(t\right)$, $T\left(t\right)$, and $P\left(t\right)$.

#### Mathematical Formulation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

I will follow the procedure described in @sec-math_form_ivodes to formulate the solution mathematically. In this example, the reactor design equations have already been written, equations (1) through (6). There is one independent variable, $t$, six dependent variables, $n_A$, $n_B$, $n_Y$, $n_Z$, $T$, and $P$, and six IVODEs, so I do not need to eliminate dependent variables or add IVODEs.

In addition, the initial value of the independent variable was defined and the corresponding initial and final values were identified in @tbl-example_J_7_1_initial_values.

:::

**Model Equations**: Equations (1) through (6) will be solved with the initial values and stopping criterion in @tbl-example_J_7_1_initial_values to find the quantities of interest.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Before the IVODEs can be solved, any unknown constants appearing in them must be calculated and any variables other than the independent variables must be eliminated from them. The only variable appearing in the IVODEs other than the independent and dependent variables is $r$. An equation, (7), for calculating $r$ was provided in the example narrative. However, using the rate expression as an ancillary equation to eliminate $r$ introduces two additional variables, $C_A$ and $C_B$, so I will write ancillary equations for them, too. The necessary equations, (8) and (9), are simply defining equations for concentration in a BSTR. A reaction engineer would know these definitions.

In this example, the initial and final values are all known constants,(@tbl-example_J_7_1_initial_values), so I do not need ancillary equations to calculate their values.

:::

**Ancillary Equations for Calculating the Derivatives**

The rate expression for $r$ is given, equation (7). The concentrations appearing in it can be calculated using equations (8) and (9).

$$
C_A = \frac{n_A}{V} \tag{8}
$$

$$
C_B = \frac{n_B}{V} \tag{9}
$$

With the information given above, equations (1) through (6) can be solved to find $n_A\left(t\right)$, $n_B\left(t\right)$, $n_Y\left(t\right)$, $n_Z\left(t\right)$, $T\left(t\right)$, and $P\left(t\right)$.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Typically the reaction engineer would need to calculate other quantities of interest using the results from solving the IVODEs. In this example there are no other quantities of interest, so I do not need to write ancillary equations for calculating them. I can conclude the mathematical formulation by describing how to perform the calculations.

:::

**Solution Procedure**

1. Substitute the known and given constants into all equations.
2. Substitute equations (8) and (9) for $C_A$ and $C_B$ in equation (7).
3. Substitute equation (7) for $r_1$ in equations (1) through (6).
4. Solve equations (1) through (6) using the initial values and stopping criterion in @tbl-example_J_7_1_initial_values to find the quantities of interest.

#### Numerical Implementation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

I will follow the general procedure for numerical implementation of the solution of a set of IVODEs presented in @sec-num_impl_ivodes. In this example, the IVODEs are not in the form of individual derivative expressions. In order to proceed I need to generate a set of derivative expressions from equations (1) through (6). I can do that either by algebraic manipulation of equations (1) through (6), or by forming and inverting the mass matrix as described in @sec-mass_matrix. I will use the latter approach to avoid the algebra where I might easily make a mistake.

:::

**Derivative Expressions**

The IVODEs, equations (1) through (6) can be written as the matrix equation, (10), with the mass matrix defined as shown in equation (11). The IVODEs can then be written, in matrix form, as derivative expressions as shown in equation (12).

$$
\boldsymbol{M}\frac{d}{dt} \begin{bmatrix} n_A \\ n_B \\ n_Y \\ n_Z \\ T \\ P \end{bmatrix} = \begin{bmatrix} -Vr_1 \\ -Vr_1 \\ Vr_1 \\ Vr_1 \\ -Vr_1\Delta H_1 \\ 0 \end{bmatrix}\tag{10}
$$

$$
\boldsymbol{M} = \begin{bmatrix} 1 & 0 & 0 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 & 0 & 0 \\ 0 & 0 & 1 & 0 & 0 & 0 \\ 0 & 0 & 0 & 1 & 0 & 0 \\ 0 & 0 & 0 & 0 & \left(n_A \hat{C}_{p,A} + n_B \hat{C}_{p,B} + n_Y \hat{C}_{p,Y} + n_Z \hat{C}_{p,Z} \right) & -V \\ RT & RT & RT & RT & R\left(n_A + n_B + n_Y + n_Z\right) & -V  \end{bmatrix} \tag{11}
$$

$$
\begin{bmatrix} \frac{dn_A}{dt} \\ \frac{n_B}{dt} \\ \frac{n_Y}{dt} \\ \frac{n_Z}{dt} \\ \frac{T}{dt} \\ \frac{P}{dt} \end{bmatrix} = \boldsymbol{M}^{-1} \begin{bmatrix} -Vr_1 \\ -Vr_1 \\ Vr_1 \\ Vr_1 \\ -Vr_1\Delta H_1 \\ 0 \end{bmatrix} \tag{12}
$$

**Implementation Procedure**

Write a reactor model computer function, and within that function

1. make given and known constants available for use in all equations,
2. write a derivatives function that 
    a. receives values of the independent variable, $t$, and the dependent variables, $n_A$, $n_B$, $n_Y$, $n_Z$, $T$, and $P$, as arguments,
    b. calculates $C_A$ and $C_B$ using equations (8) and (9),
    c. calculates $r_1$ using equation (7),
    d. creates $\boldsymbol{M}$ using equation (11),
    e. creates the vector on the right side of equation (10), and
    f. calculates and returns the derivatives using equation (12),
3. set the initial values of $t$, $n_A$, $n_B$, $n_Y$, $n_Z$, $T$, and $P$, and the final value of $t$ according to @tbl-example_J_7_1_initial_values.
4. call an IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 3) to it as arguments, and receiving sets of values of $t$, $n_A$, $n_B$, $n_Y$, $n_Z$, $T$, and $P$ spanning the range from their initial values to their final values.

:::{.callout-note collapse="false"}
## Note

Derivative expressions could also be generated by algebraic manipulation of the IVODEs. Equations (1) through (4) are already in the form of derivative expressions.

Substitution of equation (1) for $\frac{dn_A}{dt}$, equation (2) for $\frac{dn_B}{dt}$, equation (3) for $\frac{dn_Y}{dt}$, and equation (4) for $\frac{dn_Z}{dt}$ into equation (6) yields equation (13).

$$
-RTVr_1 - RTVr_1 + RTVr_1 + RTVr_1 + R\left(n_A + n_B + n_Y + n_Z\right)\frac{dT}{dt} - V\frac{dP}{dt} = 0
$$

$$
R\left(n_A + n_B + n_Y + n_Z\right)\frac{dT}{dt} - V\frac{dP}{dt} = 0 \tag{13}
$$

Subtracting equation (13) from equation (5)  and rearranging yields the derivative expression in equation (14).

$$
\frac{dT}{dt} = \frac{-Vr_1 \Delta H_1}{n_A \left(\hat{C}_{p,A} - R\right) + n_B \left(\hat{C}_{p,B} - R\right) + n_Y \left(\hat{C}_{p,Y} - R\right) + n_Z \left(\hat{C}_{p,Z} - R\right)} \tag{14}
$$

Rearrangement of equation (6) and substitution of equation (14) for $\frac{dT}{dt}$ yields the derivative expression in equation (15).

$$
\frac{dP}{dt} = \frac{R\left(n_A + n_B + n_Y + n_Z\right)}{V}\frac{dT}{dt}
$$

$$
\frac{dP}{dt} = \frac{-R\left(n_A + n_B + n_Y + n_Z\right)r_1 \Delta H_1}{n_A \left(\hat{C}_{p,A} - R\right) + n_B \left(\hat{C}_{p,B} - R\right) + n_Y \left(\hat{C}_{p,Y} - R\right) + n_Z \left(\hat{C}_{p,Z} - R\right)} \tag{15}
$$

The second step in the implementation procedure above would then be replaced as follows:

2. write a derivatives function that 
    a. receives values of the independent variable, $t$, and the dependent variables, $n_A$, $n_B$, $n_Y$, $n_Z$, $T$, and $P$, as arguments,
    b. calculates $C_A$ and $C_B$ using equations (8) and (9),
    c. calculates $r_1$ using equation (7), and
    d. calculates and returns the derivatives using equations (1) - (4), (14), and (15).

:::

#### Results and Discussion

```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
df <- read.csv(paste0(path_to_results,"reb_J_7_1_results.csv"))
df <- fmt_tibble_col(df, 1:7, 3, 3, 1)
```

The calculations were performed as described above yielding the results shown in @tbl-example_J_7_1_ivode_results

```{r}
#| echo: false
#| warning: false
#| label: tbl-example_J_7_1_ivode_results
#| tbl-cap: Solution of equations (1) through (6) using the initial values and stopping criterion in @tbl-example_J_7_1_initial_values.
library(kableExtra)
library(knitr)
kbl(df, format = "markdown", align = "cc")
```

---

Note that each of the variables in @tbl-example_J_7_1_ivode_results starts (in the first row) at its initial value, and the final value of $t$ is 2 h, as specified in the problem statement. As mentioned earlier in this appendix, the numerical solution of a set of IVODEs does not produce analytical expressions for $n_A\left(t\right)$, $n_B\left(t\right)$, $n_Y\left(t\right)$, $n_Z\left(t\right)$, $T\left(t\right)$, and $P\left(t\right)$. Instead it yields $n_A$ *vs*. $t$, $n_B$ *vs*. $t$, etc., in the form of a table that spans the range from the initial values to the values where the stopping criterion is satisfied.

:::{.callout-note collapse="false"}
## Note

The results shown here have 7 values of each variable spanning the range from their initial values to their final values. In most cases, the IVODE solver determines the number of integration steps needed to accurately solve the equations. As a consequence, if the calculations were performed using a different IVODE solver, there could be fewer or more rows than shown in @tbl-example_J_7_1_ivode_results. However, the values shown in the first and last rows would be the same.

:::

### Example: Numerical Solution of a Set of IVODEs Containing an Unknown Constant{#sec-example_J_7_2}

{{< include ../RE_Basics_Examples/reb_J_7_2/problem_statement.qmd >}}

```{r}
#| echo: false
#| output: false
path_to_results <- '../RE_Basics_Examples/reb_J_7_2/python/results/'
```

---

:::{.callout-tip collapse="true"}

## Click Here to See What an Expert Might be Thinking at this Point

To complete the assignment I will follow the steps in @sec-reactor_analysis_steps, beginning with a succinct summary of the assignment. This example sets the variable symbols for most of the known constants. I will use a subscripted "f" to denote the final values. With that notation $T_f$ equals the specified value of 325 K and $\dot{n}_{A,f}$ and $\dot{n}_{Z,f}$ represent two of the quantities of interest.

:::

#### Assignment Summary

**Given and Known Constants**: $T_f$ = 325 K, $D$ = 5 cm, $\Delta H$ = -14,000 cal mol^-1^, $\breve{C}_p$ = 1.3 cal cm^-3^ K^-1^, $\dot{n}_{A,in}$ = 1.0 mol min^-1^, $\dot{n}_{Z,in}$ = 0, $T_{in}$ = 300 K, $L$ = 50 cm, $k_0$ = 4.2 x 10^15^ cm^3^ mol^-1^ min^-1^, and $E$ = 18,000 cal mol^-1^.

**Reactor [System]**: Adiabatic, steady-state PFR with negligible pressure drop.

**Quantities of Interest**: $\dot{V}$, $\dot{n}_{A,f}$ and $\dot{n}_{Z,f}$.

#### Mathematical Formulation of the Solution

:::{.callout-tip collapse="true"}

## Click Here to See What an Expert Might be Thinking at this Point

I will follow the procedure described in @sec-math_form_ivodes to formulate the solution mathematically. In this example, the reactor design equations are provided. There are three design equations. The independent variable is $z$, and the dependent variables are $\dot{n}_A$, $\dot{n}_Z$ and $T$. There are 3 IVODEs and 3 dependent variables, so it isn't necessary to add equations or eliminate dependent variables.

The example statement also defines the initial value of $z$, and sets the variable symbols representing the initial and final values, @tbl-example_J_7_2_initial_values.

:::

**Model Equations**

Equations (1), (2), and (3) are the reactor design equations, and @tbl-example_J_7_2_initial_values lists the initial values and stopping criterion for solving them.

:::{.callout-tip collapse="true"}

## Click Here to See What an Expert Might be Thinking at this Point

Before the IVODEs can be solved, any unknown constants appearing in them must be calculated and any variables other than the independent variables must be eliminated from them. In this example, the rate, $r$, is the only variable that needs to be eliminated, and the example provides the ancillary equation, (4), needed to eliminate it.

The unknown, constant value of $\dot{V}$ also appears in the IVODEs, and it must be calculated before the IVODEs can be solved. To do that I will use the specified value of $T_f$ to write an implicit equation that can be solved to find $\dot{V}$.

:::

**Ancillary Equations for Calculating the Derivatives**

The rate, $r$ appearing in the design equations is given by equation (4).

The volumetric flow rate, $\dot{V}$, appearing in the design equations (and also in the rate expression) can be calculated by noting that it is the value that results in the final temperature being equal to $T_f$ as expressed in equation (5). In that equation, $T_f$ is the specified final value of $T$, 325 K, and $T\big\vert_{z=L}$ is the final value of $T$ that is found by solving equations (1) through (3) using a given value of $\dot{V}$.

$$
0 = T_f - T\big\vert_{z=L} = \epsilon \tag{5}
$$

Equation (5) is an implicit equation for $\dot{V}$, written as a residual. It can be solved using an ATE solver (see @sec-apndx_solve_ates) to find the desired value of $\dot{V}$ that causes the residual to equal zero. (Note that equations (1) through (3) will need to be solved within the residuals function provided to the ATE solver.)

:::{.callout-tip collapse="true"}

## Click Here to See What an Expert Might be Thinking at this Point

The initial and final values in @tbl-example_J_7_2_initial_values are all known constants, so no ancillary equations are needed to calculate their values. 

Solving the IVODEs will yield sets of values of $z$, $\dot{n}_A$, $\dot{n}_Z$, and $T$ spanning the range from their intial values to their final values. In this example only the final values of $\dot{n}_A$ and $\dot{n}_Z$ are of interest. Two trivial ancillary equations are needed to "calculate" these quantities of interest.

:::

With the information provided above, equations (1), (2), (3), and (5) can be solved to find the quantity of interest, $\dot{V}$, and $\dot{n}_A\left(z\right)$, $\dot{n}_Z\left(z\right)$, and $T\left(z\right)$. 

**Ancillary Equations for Calculating the Other Quantities of Interest**

$$
\dot{n}_{A,f} = \dot{n}_A\big\vert_{z=L} \tag{6}
$$

$$
\dot{n}_{Z,f} = \dot{n}_Z\big\vert_{z=L} \tag{7}
$$

**Solution Procedure**

1. Substitute the given and known constants into all equations.
2. Substitute equation (4) for $r$ in equations (1), (2), and (3).
3. Solve equation (5) for the quantity of interest, $\dot{V}$, and substitute the result in equations (1) through (3).
4. Solve equations (1) through (3) using the initial values and stopping criterion in @tbl-example_J_7_2_initial_values to find $\dot{n}_A\left(z\right)$, $\dot{n}_Z\left(z\right)$, and $T\left(z\right)$.
6. Calculate the remaining quantities of interest using equations (6) and (7).

#### Numerical Implementation of the Solution

:::{.callout-tip collapse="true"}

## Click Here to See What an Expert Might be Thinking at this Point

I will follow the general procedure for numerical implementation of the solution of a set of IVODEs presented in @sec-num_impl_ivodes. The IVODEs, equations (1) through (3) are in the form of derivatives expressions and the ATE, equation (5), has been written as a residual. Consequently no additional equations are needed for writing the residuals function or the derivatives function.

The numerical implementation involves both ATEs, as described in @sec-apndx_numeric_implem_ates, and IVODEs, as described in @sec-num_impl_ivodes.

:::

**Implementation Procedure**

Create a model function that will perform the calculations, and within that function

1. make the given and known constants available for use in all equations,
2. make the variable $\dot{V}$ available for use in all equations,
3. write a derivatives function that
    a. receives values of $z$, $\dot{n}_{A}$, $\dot{n}_{Z}$, and $T$ as input,
    b. calculates $r$ using equation (4), and
    c. calculates and returns the values of the derivatives using equations (1) through (3).
4. write a residuals function that
    a. receives a value of $\dot{V}$ as input and makes it available for use in all equations,
    b. defines initial values and a stopping criterion using @tbl-example_J_7_2_initial_values,
    c. calls an IVODE solver, passing the derivatives function (step 3), initial values and stopping criterion (step 4b) to get, among other things, the final value, $T\big\vert_{z=L}$, and
    d. evaluates and returns the residual, equation (5),
5. define an initial guess for $\dot{V}$,
6. call an ATE solver, passing the residuals function (step 4) and the initial guess (step 5) to get the desired value of $\dot{V}$,
7. define initial values and a stopping criterion using @tbl-example_J_7_2_initial_values,
8. using the value of $\dot{V}$ (step 6) in the derivatives function, call an IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 7) to get $\dot{n}_A\left(z\right)$, $\dot{n}_Z\left(z\right)$, and $T\left(z\right)$, and
9. calculate $\dot{n}_{A,f}$ and $\dot{n}_{Z,f}$ using equations (6) and (7).

#### Results and Discussion


```{r}
#| echo: false
#| output: false
library(tidyverse)
source("~/Libraries/R/fmt_tibble_col.R")
df <- read.csv(paste0(path_to_results,"reb_J_7_2_results.csv"))
df <- fmt_tibble_col(df, 2, 3, 3, 1)
```

The calculations were performed as described above, yielding the results shown in @tbl-example_J_7_2_results.

```{r}
#| echo: false
#| warning: false
#| label: tbl-example_J_7_2_results
#| tbl-cap: Results from solving equations (1), (2), (3), and (5).
library(kableExtra)
library(knitr)
kbl(df, format = "markdown", align = "cc")
```

:::{.callout-note collapse="false"}
## Note

Of the three examples presented in this Appendix, [Example -@sec-example_J_7_2] is the only one where a value must be "made available" to the rest of the calculations function as in steps 2 and 4a. The reason for this requirement is that the ATE solver generates the guesses for $\dot{V}$ and passes them to the residuals function. The residuals function will call the IVODE solver, but typically it only passes the name of the derivatives function, the initial values and the stopping criterion to it. Here, however, the derivative function also needs the value of $\dot{V}$ in order to calculate and return the derivatives. As a consequence, the residuals function must "make $\dot{V}$ available within the derivatives function" by some other means. The way this is done will depend upon the specific software being used. 

:::

### Example: Numerical Solution of a Set of IVODEs with an Unknown Initial Value {#sec-example_J_7_3}

{{< include ../RE_Basics_Examples/reb_J_7_3/problem_statement.qmd >}}

```{r}
#| echo: false
#| output: false
path_to_results <- '../RE_Basics_Examples/reb_J_7_3/python/results/'
```

---

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Following the steps in @sec-reactor_analysis_steps, I will begin by summarizing the assignment. In this example, variable symbols have already been assigned to each known constant and the quantities of interest have been identified, so all I need to do is list the information.

:::

**Given and Known Constants**: $D$ = 1 in, $k_0$ = 7.49 x 10^9^ L mol^-1^ min^-1^, $E$ = 15,300 cal mol^-1^, $P$ = 4 atm, $\Delta H$ = -14,500 cal mol^-1^, $\hat{C}_{p,A}$ = 10.9 cal mol^-1^ K^-1^, $\hat{C}_{p,Z}$ = 21.8 cal mol^-1^ K^-1^, $L$ = 100 in, $\dot{n}_{A,in}$ = 1.5 mol min^-1^, $\dot{n}_{Z,in}$ = 0, and $T_{out}$ = 400 K.

**Reactor**: Adiabatic, steady-state PFR with negligible pressure drop.
 
**Quantities of Interest**: $T_{in}$, $\dot{n}_A\left(z\right)$, $\dot{n}_Z\left(z\right)$, and $T\left(z\right)$.

#### Mathematical Formulation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

I will follow the procedure described in @sec-math_form_ivodes to formulate the solution mathematically. The example provides the three reactor design equations, (1) through (3). They contain a single independent variable, $z$, and three dependent variables, $\dot{n}_A$, $\dot{n}_Z$, and $T$. The number of IVODEs equals the number of dependent variables, so it is not necessary to add IVODEs or eliminate dependent variables. The example also defines the initial value of $z$, and sets the variables representing the initial and final values, @tbl-example_J_7_3_initial_values.

:::

**Model Equations**: 

The reactor design equations are presented in equations (1) through (3), and @tbl-example_J_7_3_initial_values lists the initial values and stopping criterion for solving them.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Before the IVODEs can be solved, any unknown constants appearing in them must be calculated and any variables other than the independent variables must be eliminated from them.

There aren't any unknown constants in the IVODEs. The only variable in equations (1), (2), and (3) that needs to be eliminated is the rate, $r$. The example provides the ancillary equation, (4), that is needed to do so.

:::

**Ancillary Equations for Calculating the Derivatives**

The rate, $r$, appearing in the IVODEs is given by equation (4).

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

The initial and final values must also be known or calculated before the IVODEs can be solved. Looking at @tbl-example_J_7_3_initial_values, $L$, $\dot{n}_{A,in}$, and $\dot{n}_{Z,in}$ are known, but $T_{in}$ is unknown and must be calculated. Knowing $T_{out}$, I can write an implicit equation that can be solved to find $T_{in}$.

:::

**Ancillary Equations for Calculating the Initial and Final Values**

The initial value, $T_{in}$, can be calculated by noting that it is the value that results in the final temperature being equal to $T_{out}$, as expressed in equation (5), where $T\big\vert_{z=L}$ is the final temperature found by solving the IVODEs using a given value of $T_{in}$. Equation (5) is an implicit equation for $T_{in}$. It is written in the form of a residual and can be solved using a ATE solver. (Note that the residuals function provided to the ATE solver will need to solve the IVODEs in order to evaluate the residual).

$$
0 = T\big\vert_{z=L} - T_{out} = \epsilon \tag{5}
$$

With the information given above, equations (1), (2), (3), and (5) can be solved to find $T_{in}$, $\dot{n}_A\left(z\right)$, $\dot{n}_Z\left(z\right)$, and $T\left(z\right)$.

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

Solving the design equations as just described will yield all of the quantities of interest. Thus, no other ancillary equations are needed to calculate other quantities of interest.

:::

**Solution Procedure**

1. Substitute the known and given constants into all equations.
2. Substitute equation (4) for $r$ in equations (1), (2), and (3).
3. Solve equation (5) for the quantity of interest, $T_{in}$.
4. Solve equations (1) through (3) using the initial values and stopping criterion in @tbl-example_J_7_3_initial_values for the remaining quantities of interest, $\dot{n}_A\left(z\right)$, $\dot{n}_Z\left(z\right)$, and $T\left(z\right)$.

#### Numerical Implementation of the Solution

:::{.callout-tip collapse="true"}
## Click Here to See What an Expert Might be Thinking at this Point

I will follow the general procedure for numerical implementation of the solution of a set of IVODEs presented in @sec-num_impl_ivodes. In this example, the IVODEs are derivative expressions, so no additional equations are needed.

:::

**Implementation Procedure**

Write a reactor model computer function, and within that function

1. make given and known constants available for use in all equations,
2. write a derivatives function that 
    a. receives values of $z$, $\dot{n}_A$, $\dot{n}_Z$, and $T$,
    b. calculates $r$ using equation (4), and
    c. calculates and returns the values of the derivatives using equations (1) through (3),
3. write a residuals function that
    a. receives a value of $T_{in}$ as input,
    b. defines initial values and a stopping criterion using @tbl-example_J_7_3_initial_values,
    c. calls an IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 3b) to get the final values of $T\big\vert_{z=L}$ (along with other results), and
    d. evaluates and returns the residual, equation (5),
4. define an initial guess for $T_{in}$,
5. call an ATE solver, passing the residuals function (step 3) and the initial guess (step 4) to get the desired value of $T_{in}$,
6. use the result from step 5 to define initial values and a stopping criterion using @tbl-example_J_7_3_initial_values, and
7. call an IVODE solver, passing the derivatives function (step 2), initial values and stopping criterion (step 6) to get $\dot{n}_A\left(z\right)$, $\dot{n}_Z\left(z\right)$, and $T\left(z\right)$.

#### Results and Discussion

```{r}
#| echo: false
#| output: false
source("~/Libraries/R/fmt_tibble_col.R")
df <- read.csv(paste0(path_to_results,"reb_J_7_3_Tin_result.csv"))
df <- fmt_tibble_col(df, 2, 3, 3, 1)
df1 <- read.csv(paste0(path_to_results,"reb_J_7_3_profile_results.csv"))
df1 <- fmt_tibble_col(df1, 1:4, 3, 3, 1)
```

The calculations were performed as described above. The required inlet temperature, $T_{in}$, is `r df$value[1]` `r df$units[1]`.  Using that initial value and solving the IVODEs yields the results shown in @tbl-example_J_7_1_ivode_results

```{r}
#| echo: false
#| warning: false
#| label: tbl-example_J_7_3_ivode_results
#| tbl-cap: Solution of equations (1) through (3).
library(kableExtra)
library(knitr)
kbl(df1, format = "markdown", align = "cc")
```

When 334 K was used as the initial value of the temperature, @tbl-example_J_7_3_ivode_results shows that the final temperature did, indeed, equal 400 K. That table additionally shows that the initial values of $z$, $\dot{n}_A$ and $\dot{n}_Z$, and the final value of $z$ all have their specified values. Thus the results are consistent.

## Symbols Used in @sec-apndx_solve_ivodes

| Symbol | Meaning |
|:-------|:--------|
| $a$ | Constant appearing in the IVODEs |
| $f_i$ | Function of the independent and dependent variables in the $i^{th}$ differential equation when the ODEs are written in vector form without a matrix. |
| $\underline f$ | Column vector formed from a set of functions. |
| $g_i$ | Function of the independent and dependent variables in the $i^{th}$ differential equation when the ODEs are written using a matrix. |
| $\underline g$ | Column vector formed from a set of functions. |
| $m_{i,j}$ | Coefficient that multiplies the derivative of dependent variable $j$ in the $i^{th}$ differential equation. |
| $n_i$ | Molar amount of reagent $i$. |
| $r$ | Reaction rate per unit volume. |
| $t$ | Time; a subscripted $f$ indicates the *final* time. |
| $x$ | Generic independent variable; a subscripted $0$ indicates the initial value. |
| $\left(x_i,y_i\right)$ | Cartesion coordinates of the $i^{th}$ point. |
| $y$ | Generic dependent variable; a numerical subscript denotes one specific dependent variable out of the vector $\underline y$; an additional subscripted $f$ indicates the *final* value; an additional subscripted $0$ indicates the initial value. |
| $\underline y$ | Column vector formed from the dependent variables in a set of ODEs. |
| $z$ | axial position measured from the reactor inlet. |
| $\hat C_{p,i}$ | Molar heat capacity of reagent $i$. |
| $\boldsymbol{M}$ | Matrix of coefficients that multiplies a column vector of derivatives when the ODEs are written using a matrix. |
| $N$ | Number of IVODEs in the set. |
| $P$ | Pressure. |
| $R$ | Ideal gas constant. |
| $T$ | Temperature; a subscripted $in$ denotes the *inlet* temperature. |
| $V$ | Volume of fluid. |
| $\Delta x$ | Change in the value of the independent variable. |
| $\Delta y$ | Change in the value of the dependent variable. |
| $\Delta H$ | Heat of reaction. |

: {tbl-colwidths="[20,80]"}