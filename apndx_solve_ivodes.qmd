# Solving Initial-Value ODEs {#sec-apndx_solve_ivodes}

This appendix examines the numerical solution of sets of initial value ordinary differential equations (IVODEs). There are many software packages that include an IVODE solver (a function that can be used to solve sets of IVODEs). While the details differ between software packages, almost all IVODE solvers require the same input and they return essentially the same results. This appendix provides sufficient information for readers to follow *Reaction Engineering Basics* examples and to solve sets of IVODEs using the IVODE solver they prefer. Readers seeking a more complete understanding of how IVODE solvers work should consult a numerical methods reference book or take a course on numerical methods.

## IVODEs

A differential equation contains at least one derivative. A distinguishing feature of a set of **ordinary** differential equations (ODEs) is that every derivative that appears in the equations has the same independent variable. Put differently, there are no partial derivatives in a set of ordinary differential equations. In virtually all cases, the sets of ODEs that are solved in *Reaction Engineering Basics* are linear, first-order ODEs. That means that there are no higher order derivatives in the equations and that there are no products, quotients or powers of the first-order derivatives.

Most generally, the sets of ODEs under consideration here will take the form shown in Equations [-@eq-example-ode-1] through [-@eq-example-ode-4]. In those equations $x$ is the independent variable; $y_1$, $y_2$, $y_3$, and $y_4$ are the dependent variables; and $m_{1,1}$ through $m_{4,4}$ and $g_1$ through $g_4$ can be constants (including zero) or functions of the independent and dependent variables.

$$
m_{1,1}\frac{dy_1}{dx} + m_{1,2}\frac{dy_2}{dx} + m_{1,3}\frac{dy_3}{dx} + m_{1,4}\frac{dy_4}{dx} = g_1 
$$ {#eq-example-ode-1}

$$
m_{2,1}\frac{dy_1}{dx} + m_{2,2}\frac{dy_2}{dx} + m_{2,3}\frac{dy_3}{dx} + m_{2,4}\frac{dy_4}{dx} = g_2 
$$ {#eq-example-ode-2}

$$
m_{3,1}\frac{dy_1}{dx} + m_{3,2}\frac{dy_2}{dx} + m_{3,3}\frac{dy_3}{dx} + m_{3,4}\frac{dy_4}{dx} = g_3 
$$ {#eq-example-ode-3}

$$
m_{4,1}\frac{dy_1}{dx} + m_{4,2}\frac{dy_2}{dx} + m_{4,3}\frac{dy_3}{dx}  + m_{4,4}\frac{dy_4}{dx} = g_4 
$$ {#eq-example-ode-4}

While four equations are being used here for illustration purposes, there can be any number of ordinary differential equations in the set as long as the number of ordinary differential equations is equal to the number of dependent variables, and there is only one independent variable. In *Reaction Engineering Basics*, the independent variable is either the elapsed time, $t$, or the axial position, $z$, measured from the inlet of a plug flow reactor.

A set of $N$ linear, first-order ordinary differential equations will contain 1 independent variable and $N$ dependent variables. The other quantities that may appear within the $m_{i,j}$ coefficients and $g_i$ functions are (a) known constants, (b) the independent variable, (c) the dependent variables, and (d) additional unknowns. Before the set of ODEs can be solved, the additional unknowns must be calculated or provided as described later in this appendix.

### Identifying IVODEs

Ordinary differential equations apply over some range of the independent variable, $x$. Very often the range begins at $x=0$. The values of the dependent variables at $x$ = 0 then are called the initial values. The other end of the range where the ODEs apply can be specified by providing the "final value" of either $x$ or any one of the dependent variables.

In *Reaction Engineering Basics,* three different numerical approaches are employed when solving a set of ODEs. The numerical approach that is used depends upon which of the initial and final values are known (or can be calculated directly). If [all]{.underline} of the initial values ($x$ and every $y_j$) and [only one]{.underline} final value (either $x$ or one of the $y_j$) are known, the ODEs are referred to as **IVODEs**, or initial-value ODEs, in *Reaction Engineering Basics.* This appendix describes the numerical solution of IVODEs.

If two or more final values are known or can be calculated directly, the equations are referred to in *Reaction Engineering Basics* as either as CVODEs (coupled-value ODEs) or BVODEs (boundary-value ODEs). The identification and numerical solution of CVODEs is considered in @sec-apndx_solve_cvodes, and @sec-apndx_solve_bvodes considers BVODEs. 

### Preparing to Solve IVODEs {#sec-mass_matrix}

In preparation for solving a set of $N$ IVODEs, they should be rearranged into a set of derivative functions if they aren't already in that form. For example, Equations [-@eq-example-ode-1] through [-@eq-example-ode-4] need to be converted to derivative expressions of the form shown in Equations [-@eq-example-vector-ode-1] through [-@eq-example-vector-ode-4] where $f_1$, $f_2$, $f_3$, and $f_4$ each may be a function of $x$, $y_1$, $y_2$, $y_3$, and $y_4$ and may also contain known constants and additional unknowns that must be calculated or provided before the IVODEs can be solved numerically.

$$
\frac{dy_1}{dx}  = f_1 
$$ {#eq-example-vector-ode-1}

$$
\frac{dy_2}{dx} = f_2 
$$ {#eq-example-vector-ode-2}

$$
\frac{dy_3}{dx} = f_3 
$$ {#eq-example-vector-ode-3}

$$
\frac{dy_4}{dx} = f_4 
$$ {#eq-example-vector-ode-4}

That can be accomplished by algebraic manipulation of Equations [-@eq-example-ode-1] through [-@eq-example-ode-4], but it is particularly straightforward if the original IVODEs are written as a matrix equation. The coefficients in Equations [-@eq-example-ode-1] through [-@eq-example-ode-4], $m_{1,1}$, $m_{1,2}$, etc., can be used to construct a so-called mass matrix, $\boldsymbol{M}$, as shown in @eq-mass-matrix, the dependent variables can be used to construct a column vector, $\underline{y}$, as in equation @eq-dependent-var-vector, and the functions, $g_1$, $g_2$, $g_3$, and $g_4$, can be used to construct a column vector, $\underline{g}$, as in equation @eq-function-vector.

$$
\boldsymbol{M} = \begin{bmatrix} m_{1,1} \ m_{1,2} \ m_{1,3} \ m_{1,4} \\m_{2,1} \ m_{2,2} \ m_{2,3} \ m_{2,4} \\m_{3,1} \ m_{3,2} \ m_{3,3} \ m_{3,4} \\ m_{4,1} \ m_{4,2} \ m_{4,3} \ m_{4,4}  \end{bmatrix}
$$ {#eq-mass-matrix}

$$
\underline{y} = \begin{bmatrix} y_1 \\ y_2 \\ y_3 \\ y_4 \end{bmatrix}
$$ {#eq-dependent-var-vector}

$$
\underline{g} = \begin{bmatrix} g_1 \\ g_2 \\ g_3 \\ g_4 \end{bmatrix}
$$ {#eq-function-vector}

Equations [-@eq-example-ode-1] through [-@eq-example-ode-4] then can be written as a matrix equation, @eq-matrix-form-ivode. Pre-multiplying each side of @eq-matrix-form-ivode by the inverse of the mass matrix yields the desired derivative expressions, @eq-matrix-form-of-vector-ivodes. That is, comparing @eq-matrix-form-of-vector-ivodes to Equations [-@eq-example-vector-ode-1] through [-@eq-example-vector-ode-4], it is apparent that they are equivalent with  $f_1$, $f_2$, $f_3$, and $f_4$ given by @eq-g-in-terms-of-f.

$$
\boldsymbol{M}\frac{d}{dx}\underline{y} = \underline{g}
$$ {#eq-matrix-form-ivode}

$$
\frac{d}{dx}\underline{y} = \boldsymbol{M}^{-1} \underline{g}
$$ {#eq-matrix-form-of-vector-ivodes}

$$
\begin{bmatrix} f_1 \\ f_2 \\ f_3 \\ f_4 \end{bmatrix} = \underline{f} = \boldsymbol{M}^{-1} \underline{g}
$$ {#eq-g-in-terms-of-f}

## IVODE Solvers

An IVODE solver is a computer function that solves a set of IVODEs numerically. It must be provided with the following inputs: (a) the initial value of the independent variable, (b) the corresponding initial value of each dependent variable, (c) a stopping criterion, and (d) a derivatives function. The stopping criterion for IVODEs is that the variable for which the final value is known reaches that final value. The derivatives function calculates the values of the derivatives given values for the independent and dependent variables.

An IVODE solver returns sets of corresponding values of the independent variable and each of the dependent variables spanning the range from their initial value to the point where the stopping criterion was satisfied. The inner workings of IVODE solvers are beyond the scope of *Reaction Engineering Basics*. Nonetheless, a simplified understanding of how IVODEs are solved numerically is useful.

The solver starts from the initial values, as illustrated graphically in panel (a) of @fig-ivode-integration-step for any one of the dependent variables. It isn't possible to plot $y$ *vs.* $x$ at that point because $y\left(x\right)$ is not known. (Indeed, $y\left(x\right)$ is the solution to the IVODE.) Instead, the solver uses the IVODEs to calculate the value of each of the derivatives at $\left(x_0,y_0\right)$. The derivative, $\frac{dy}{dx}$, at that point is the slope of the unknown function at $\left(x_0,y_0\right)$. This is shown graphically in panel (b) of @fig-ivode-integration-step.

![Graphical Representation of an IVODE Integration Step. (a) The initial value. (b) The slope at that point. (c) Incrementally increasing x and approximating the corresponding y.](./Graphics/IVODE_Integration_Step.png){#fig-ivode-integration-step}

Starting from the known point, $\left(x_0,y_0\right)$, the solver increases $x$ by a small amount, $\Delta x$, which is known as the *step-size*. It then calculates the corresponding change in $y$, $\Delta y$, using the slope. The resulting point, $\left(x_1,y_1\right)$, is shown in panel (c) of @fig-ivode-integration-step. This process is sometimes referred to as taking an integration step. Effectively, the solver uses the small straight line segment between $\left(x_0,y_0\right)$ and $\left(x_1,y_1\right)$ to approximate the true solution, $y\left(x\right)$, in that interval. The accuracy of this approximation increases as $\Delta x$ decreases, so typically the solver uses small steps. A new integration step is then taken starting from $\left(x_1,y_1\right)$.

Of course, the solver eventually must stop taking integration steps. After completing each step, the solver checks to determine whether making that step resulted in the stopping criterion being satisfied. If not, the solver takes another integration step. As an example, suppose the stopping criterion is that $y_3$ should equal some value, $y_{3,f}$, the solver would check to see whether $y_3$ did, in fact, reach or surpass $y_{3,f}$ after making the step. In most cases the stopping criterion will have been surpassed by some small amount, in which case the solver interpolates to find final values that exactly satisfy the stopping criterion. It then returns the values of the dependent variables and the independent variable for all of the steps it took while solving the IVODEs, including those final interpolated values.

### The Derivatives Function  

The IVODE solver is part of a mathematics software package. It must call the derivatives function which is written by the engineer who needs to solve a set of IVODEs. While the arguments to derivatives function are always a set of values of the independent and dependent variables, and while the return values are always the corresponding values of the derivatives of each dependent variable with respect to the independent variable, the details are specified by the mathematics software package. It sets how those quantities are formatted, the order in which they are passed or returned. etc. The engineer calling the IVODE solver must write the derivatives function so it conforms to those specifications.

The calculations performed within the derivarives function are straightforward. It receives values for the independent and dependent variables, and known constants from the assignment narrative can be used whenever needed. If there are any additional unknowns in the IVODEs, their values are must be calculated first. In most cases these quantities can be calculated using the independent variable, the dependent variables, and the known constants. However, if it is not possible to calculate any of the additional unknowns appearing in the IVODEs, they must be provided to the derivatives function.

Providing unknown constants to the residuals function forces a computer programming choice like that described in @sec-apndx_solve_ates for the residuals function. The issue is that the additional unknowns cannot be passed to the derivatives function as arguments. The arguments that can be passed to the derivatives function are fixed by the mathematics software package being used and are limited to values of the independent and dependent variables. As a consequence, any additional unknowns that cannot be calculated within the derivatives function will need to be provided by other means. The documentation for the mathematics software package may suggest a preferred way to do this such as by using a global variable or by using a pass-through function. Once the additional unknowns have been calculated or made available, all that remains to be done within the derivatives function is to evaluate the derivatives using the derivative expressions described.

### IVODE Solver Issues

Generally IVODE solvers are quite robust when solving the kinds of ODEs encountered in introductory reaction engineering courses. However, there are three issues to be aware of. The first is failure to reach the known final value of a [dependent]{.underline} variable. When the final value of a dependent variable is being used as the stopping criterion, many solvers require the user to provide *both* that final value *and* a final value for the independent variable. The solver then takes steps as described above, and after each step it checks to see whether either variable has reached its specified final value. If the final value of the *independent* variable is too small, the solver may reach that value first and stop. As a consequence, the specified value of the dependent variable will not have been reached, and the result that is returned will not span the full range in which the ODEs apply. Therefore it is important to check the solution and verify that the dependent variable reached its known final value.

To avoid having the solver stop because it reached the stopping criterion for the *independent* variable, it is tempting to specify a very large final value for it. This could result in the second solver issue. The initial step size used by the solver often increases when the final value of the independent variable is increased. In some extreme cases, if the initial step size becomes too large, the linear approximation indicated in @fig-ivode-integration-step is not valid, resulting in an inaccurate solution. Therefore, it is important to check that the step size was not too large. The solution that is returned will include the final value of the independent variable. To check that the initial step size was not too large, the stopping criterion for the independent variable can be set to a value slightly larger than that, and the ODEs can be solved a second time. Assuming the second solution reaches the desired stopping criterion for the dependent variable, the second solution should be accurate.

The third possible issue arises when solving sets of IVODEs where one of the dependent variables changes very abruptly over a very small range of the independent variable. The abrupt changes in that dependent variable may significantly affect the other dependent variables over a much broader range of the independent variable. Equations like this are called **stiff ODEs**, and they require special treatment of the step size. Therefore, when solving sets of ODEs, one should pay attention to whether any of the dependent variables change very abruptly as the independent variable changes. If they do, it is advisable to repeat the solution using a solver that is specifically tailored to stiff ODEs.

## Mathematical Formulation of the Numerical Solution of a Set of IVODEs {#sec-math_form_ivodes}

In *Reaction Engineering Basics* examples, the numerical solution of sets of IVODEs is typically formulated as part of a model for a reactor. While formulating the reactor model, the design equations will be generated and identified as IVODEs, the initial values will be determined, and the stopping criterion will be established. The stopping criterion will set a known final value for the independent variable or one of the dependent variables. Given and known constants and any additional unknowns will be identified. The equations necessary for calculating the additional unknowns from given values of the independent and dependent variables also will be generated.

The formulation of the reactor model includes specifications for a derivatives function and a reactor function. These specifications are written so as to concisely provide all of the information that is needed to write the computer code for those functions. The formulation always assumes that given and known constants are available whenever they are needed.

### Specifications for the Derivatives Function

The derivatives function specification should include a list of the arguments to be passed to it, a list of the quantities it will return, a list of any quantities that must be provided to it by means other than as an argument, and its algorithm. The arguments to the derivatives function are always a set of values for the independent and dependent variables, and the return values are always the corresponding values of the derivatives of each dependent variable with respect to the independent variable. When the code is written, the arguments and return values must be formatted as specified by the mathematics software being used.

The algorithm lists, in order of use, expressions for each quantity that needs to be calculated, ending with the evaluation of the derivatives. Additional unknowns are calculated first, and as the equations for doing so are being listed, it may be found that additional input is needed that can't be provided as arguments. Such input is added to the list of quantities that must be provided by means other than as an argument. The algorithm then concludes with the derivative expressions for evaluating the derivatives.

### Specifications for the Reactor Function

The IVODEs are typicallly the design equations for a reactor. They are solved within a reactor function which, for IVODEs, returns a set of corresponding values of the independent variable and the dependent variables that span the range from their initial values to their final values. The specifications will include a list of the arguments, a list of the return values, and the algorithm.

The reactor function is not called by any functions from a mathematics software package. As such, any input it needs can be provided as arguments, and it isn't necessary to provide input by any other means. The arguments passed to it will depend upon the specifics of the analysis being performed, and it is possible that the reactor function will not have any arguments. As noted above, the return values are a set of corresponding values of the independent variable and the dependent variables that span the range from their initial values to their final values.

The algorithm for the reactor function will begin with the specification or calculation of the initial values and the stopping criterion. Next, if the derivatives function requires input other than the independent and dependent variables, that input should be made available to it. Once that is done, the reactor function should call the IVODE solver passing the initial values, stopping criterion, and derivatives function as arguments. The IVODE solver will return corresponding values of the independent variable and the dependent variables that span the range from their initial values to their final values, so no further calculations will be necessary.

## Example

The following example illustrates the formulation of the numerical solution of a set of IVODEs. At each step in the formulation presented here, the solution describes how the engineer knew what to do, and then shows how it was done. In examples presented in the body of this book, the discussion of how the engineer knew what to do is made available in callouts with the heading "Click Here to See What an Expert Might be Thinking at this Point."

### Example: Formulation of the Solution of a Set of BSTR Design Equations {#sec-example_J_4_1}

A reaction engineer who needs to model a BSTR generated the design equations shown in equations (1) and (2). Reaction (3) takes place in the reactor. The engineer knows that the rate, $r$, that appears in the design equations can be calculated using equation (4), the rate coefficient, $k$, in equation (4) can be calculated using the Arrhenius expression, equation (5), and the concentration of A, $C_A$, is defined as shown in equation (6).

$$
\frac{dn_A}{dt} = -rV \tag{1}
$$

$$
\frac{dn_Z}{dt} = rV \tag{2}
$$

$$
A \rightarrow Z \tag{3}
$$

$$
r = kC_A \tag{4}
$$

$$
k = k_0 \exp{\left( \frac{-E}{RT}\right)} \tag{5}
$$

$$
C_A = \frac{n_A}{V} \tag{6}
$$

The gas constant, $R$ = 8.314 J mol^-1^ K^-1^, reactor volume, $V$ = 1 L, final time, $t_f$ = 30 min, initial concentration of A, $C_{A,0}$ = 0.5 mol L^-1^, initial concentration of Z, $C_{Z,0}$ = 0.0 mol L^-1^ and temperature, $T$ = 338 K, are known constants. The engineer knows that the molar amounts of A and Z in the BSTR at $t=0$ are given by equations (7) and (8). The constant values of the Arrhenius pre-exponential factor, $k_0$, and activation energy, $E$, will be provided at the time it is necessary to solve equations (1) and (2).

$$
n_{A,0} = C_{A,0}V \tag{7}
$$

$$
n_{Z,0} = C_{Z,0}V \tag{8}
$$

Describe and show how the engineer might formulate a model for the BSTR that solves equations (1) and (2) to find the molar amounts of A and Z over the span of time from $t=0$ to $t=t_f$.

---

The assignment narrative asks me to describe the formulation of a model for the BSTR. However, the engineer might summarize the assignment before formulating the BSTR model. In terms of solving the IVODEs, the important components of the assignment summary would be a list of the known constants (and the basis if there was one) and their values, identification of the quantities of interest, and identification of any parameters. (In this example $k_0$ and $E$ are paramters; the design equations will be solved for different sets of values of $k_0$ and $E$.) Those components of the assignment summary might take the following form.

**Quantities of Interest:** $n_A\left(t\right)$ and $n_Z\left(t\right)$, as graphs with $0\le t \le t_f$ for given values of $k_0$ and $E$.

**Given and Known Constants:** $V$ = 1 L, $t_f$ = 5 min, $C_{A,0}$ = 0.5 mol L^-1^, , $C_{Z,0}$ = 0.0 mol L^-1^, $T$ = 338 K, and $R$ = 8.314 J mol^-1^ K^-1^.

The next thing the engineer would do is to determine the type of equations (1) and (2). Both equations contain ordinary first derivatives with a common independent variable, $t$, making them ODEs. The values of $n_A$ and $n_Z$ are known at $t=0$. The final value of $t$ is also known while the corresponding final values of $n_A$ and $n_Z$ are not known and can't be calculated directly. When all of the initial values and only one final value are known, the ODEs are IVODEs.

The formulation of the BSTR model would list the design equations. Since the equations are IVODEs, the engineer would need to know that to solve them numerically initial values, a stopping criterion, and a derivatives function are needed. The initial values and stopping criterion then would be included in the BSTR model formulation along with the specifications for the derivatives function.

The specifications for the derivatives function would include the arguments passed to it (always being the independent and dependent variables), the values it must return (always being the derivative of each dependent variable with respect to the independent variable), quantities that must be made available to it (by means other than as arguments), and its algorithm. In this example, since $k_0$ and $E$ cannot be calculated within the derivatives function and they aren't among the arguments passed to it, they must be made available by some other means.

In the design equations, $t$ is the independent variable, $n_A$ and $n_Z$ are the dependent variables, and $V$ is a known constant. The rate, $r$, is an additional variable that must be calculated within the derivatives function before the derivatives can be evaluated. Equations (4) through (6) can be used to accomplish that, and then equations (1) and (2) can be used to evaluate the derivatives.

At this point, the design equations have been generated, the initial values and stopping criterion have been defined, and the specifications for the derivatives function have been written. It remains to actually solve the IVODEs. A BSTR function will be written to do this, so the final thing added to the BSTR model formulation are specifications for the BSTR function.

Those specifications include the arguments to the BSTR function, the quantities it returns, and its algorithm. In the present example, the values of $k_0$ and $E$ will be provided at the time the IVODEs need to be solved, so they will be passed to the BSTR function as arguments. 

The assignment narrative stated that the design equations should be solved for the molar amounts of A and Z over the span of time from $t=0$ to $t=t_f$. The IVODE solver will return a set of values of $t$ and corresponding sets of values of $n_A$ and $n_Z$ that span the range from their initial value to their final values, so the BSTR function can simply return the solution it receives from the solver.

The BSTR function algorithm is straightforward. The initial values and stopping criterion are first set. The values of $k_0$ and $E$ are then made available to the derivatives function. The IVODE solver then can be called to get the solution of the IVODEs.

The complete formulation of the BSTR model then would take the following form where it is assumed that the known constants are available wherever needed.

<center>**BSTR Model**</center>

**Design Equations**

$$
\frac{dn_A}{dt} = -rV \tag{1}
$$

$$
\frac{dn_Z}{dt} = rV \tag{2}
$$

**Initial Values and Stopping Criterion:**

| Variable | Initial Value | Stopping Criterion |
|:-------|:-------:|:-------:|
| $t$ | $0$ | $t_f$ |
| $n_A$ | $C_{A,0} V$ |  |
| $n_Z$ | $C_{Z,0} V$ | |

: Initial values and stopping criterion for solving the design equations, equations (1) and (2). {#tbl-example_J_4_1_initial_values tbl-colwidths="[20, 40, 40]"}

**Derivatives Function:**

[Arguments:]{.underline} $t$, $n_A$, and $n_Z$

[Must be Available:]{.underline} $k_0$ and $E$

[Returns:]{.underline} $\frac{dn_A}{dt}$ and $\frac{dn_Z}{dt}$

[Algorithm:]{.underline}

$$
k = k_0 \exp{\left( \frac{-E}{RT}\right)} \tag{5}
$$

$$
C_A = \frac{n_A}{V} \tag{6}
$$

$$
r = kC_A \tag{4}
$$

$$
\frac{dn_A}{dt} = -rV \tag{1}
$$

$$
\frac{dn_Z}{dt} = rV \tag{2}
$$

**BSTR Function:**

[Arguments:]{.underline} $k_0$ and $E$

[Returns:]{.underline} $\underline{t}$, $\underline{n}_A$ and $\underline{n}_Z$

[Algorithm:]{.underline}

$$
t_0 = 0 \tag{8}
$$

$$
n_{A,0} = C_{A,0}V \tag{7}
$$

$$
n_{Z,0} = C_{Z,0}V \tag{9}
$$

$$
k_0, E \, \Rightarrow \, \text{available to derivatives function} \tag{10}
$$

&nbsp;

$$
\begin{matrix}
t_0, n_{A,0}, n_{Z,0}, t_f, \text{derivatives function} \\
\Downarrow \\
\text{IVODE Solver} \\
\Downarrow \\
\underline{t}, \underline{n}_A, \underline{n}_Z
\end{matrix} \tag{11}
$$

#### Results, Analysis and Discussion

A BSTR model like the one generated here might be used during the analysis of kinetics data from an isothermal BSTR. In that situation, parameter estimation software would be generating the values of $k_0$ and $E$ for which the design equations were then solved. (See [Example -@sec-example_19_5_1].)

Here computer code was written to implement the BSTR model as formulated above. That is, the derivatives and BSTR functions were created using a mathematics software package that included an IVODE solver. The derivatives function arguments and return values were formatted and passed as specified by the mathematics software package.

To test the BSTR function, additional code was written. That code called the BSTR function with the arguments, $k_0$ and $E$, equal to 3.6 x 10^-8^ min^-1^ and 67.5 kJ mol^-1^, respectively. It then plotted the resulting values of $n_A$ and $n_Z$ as functions of $t$. The results are shown in @fig-example_J_4_1_profiles.

![Molar amounts of reagents A and Z over the first 30 min. of reaction](Calculations/example_J_4_1/profiles.png){#fig-example_J_4_1_profiles width="70%"}

As expected, the time ranges from $t=t_0=0$ to $t=t_f=30.0$ min, the molar amount of the reactant, A, decreases steadily, and the molar amount of the product, Z, increases steadily.

## Symbols Used in @sec-apndx_solve_ivodes

| Symbol | Meaning |
|:-------|:--------|
| $f_i$ | Function of the independent and dependent variables in the $i^{th}$ differential equation when the ODEs are written in vector form without a matrix. |
| $\underline f$ | Column vector formed from a set of functions. |
| $g_i$ | Function of the independent and dependent variables in the $i^{th}$ differential equation when the ODEs are written using a matrix. |
| $\underline g$ | Column vector formed from a set of functions. |
| $k$ | Rate coefficient. |
| $k_0$ | Arrhenius pre-exponential factor. |
| $m_{i,j}$ | Coefficient that multiplies the derivative of dependent variable $j$ in the $i^{th}$ differential equation. |
| $n_i$ | Molar amount of reagent $i$, an additional subscripted '$0$' denotes the initial amount. |
| $r$ | Reaction rate per unit volume. |
| $t$ | Time; a subscripted $f$ indicates the *final* time. |
| $x$ | Generic independent variable; a subscripted $0$ indicates the initial value. |
| $\left(x_i,y_i\right)$ | Cartesion coordinates of the $i^{th}$ point. |
| $y$ | Generic dependent variable; a numerical subscript denotes one specific dependent variable out of the vector $\underline y$; an additional subscripted $f$ indicates the *final* value; an additional subscripted $0$ indicates the initial value. |
| $\underline y$ | Column vector formed from the dependent variables in a set of ODEs. |
| $z$ | axial position measured from the reactor inlet. |
| $C_i$ | Concentration of reagent $i$, an additional subscripted '$0$' denotes the initial concentration. |
| $E$ | Activation energy. |
| $\boldsymbol{M}$ | Matrix of coefficients that multiplies a column vector of derivatives when the ODEs are written as a matrix equation. |
| $N$ | Number of IVODEs in the set. |
| $R$ | Ideal gas constant. |
| $T$ | Temperature; a subscripted $in$ denotes the *inlet* temperature. |
| $V$ | Volume of fluid. |
| $\Delta x$ | Change in the value of the independent variable. |
| $\Delta y$ | Change in the value of the dependent variable. |

: {tbl-colwidths="[20,80]"}